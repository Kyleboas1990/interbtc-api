import * as interbtcIndex from "@interlay/interbtc-index-client";
import { INDEX_URL } from "../utils/constants";

// The generated client contains the following autogenerated middleware helpers, which must be filtered out
const GeneratedMiddlewareFns = ["withMiddleware", "withPreMiddleware", "withPostMiddleware"] as const;
type GeneratedMiddlewareFns = typeof GeneratedMiddlewareFns[number];
// For every 'foo() => Promise<T>' function, the generated client
// has a 'fooRaw() => <Promise<ApiResponse<T>>' counterpart. These must be filtered out
type RawApiResponse = Promise<interbtcIndex.ApiResponse<any>>;

export type IndexAPI = Pick<
    interbtcIndex.IndexApi,
    {
        [ApiFn in keyof interbtcIndex.IndexApi]-?: ReturnType<interbtcIndex.IndexApi[ApiFn]> extends RawApiResponse
            ? never
            : ApiFn extends GeneratedMiddlewareFns
            ? never
            : ApiFn;
    }[keyof interbtcIndex.IndexApi]
>;

export const DefaultIndexAPI: IndexAPI = (() => {
    const index = new interbtcIndex.IndexApi(new interbtcIndex.Configuration({ basePath: INDEX_URL }));

    const thickWrappers = {
        getBtcConfirmations: async (): Promise<number> => {
            return 3;
        },
    };

    const excludeFromThinWrappers = (key: string) =>
        Object.keys(thickWrappers).includes(key) ||
        (GeneratedMiddlewareFns as readonly string[]).includes(key) ||
        key.includes("Raw");
    const thinWrappers = Object.fromEntries(
        Object.entries(index)
            .filter(([apiName, _]) => !excludeFromThinWrappers(apiName))
            .map(([apiName, apiFn]) => {
                return [apiName, apiFn];
            })
    ) as Omit<interbtcIndex.IndexApi, keyof typeof thickWrappers>;

    return {
        ...thickWrappers,
        ...thinWrappers,
    };
})();
