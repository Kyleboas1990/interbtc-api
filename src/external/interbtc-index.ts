import * as interbtcIndex from "@interlay/interbtc-index-client";
import { IndexApi as RawIndexApi } from "@interlay/interbtc-index-client";
import { Polkadot, PolkadotUnit } from "@interlay/monetary-js";
import Big from "big.js";
import { DOTBTCOracleStatus } from "../types/oracleTypes";
import {newCollateralBTCExchangeRate} from "../utils/currency";

/* Add wrappers here. Use keys matching the raw API call names to override those APIs with the wrappers. */
const explicitWrappers = (index: RawIndexApi) => {
    return {
        getLatestSubmissionForEachOracle: async (): Promise<DOTBTCOracleStatus[]> => {
            const oracleStatus = await index.getLatestSubmissionForEachOracle();
            return oracleStatus.map((rawStatus) => {
                const exchangeRate = newCollateralBTCExchangeRate<PolkadotUnit>(new Big(rawStatus.exchangeRate),
                    Polkadot);
                return {
                    ...rawStatus,
                    exchangeRate
                };
            });
        },
        getLatestSubmission: async (): Promise<DOTBTCOracleStatus> => {
            const submission = await index.getLatestSubmission();
            const exchangeRate = newCollateralBTCExchangeRate<PolkadotUnit>(new Big(submission.exchangeRate),
                Polkadot);
            return {
                ...submission,
                exchangeRate,
            };
        }
    };
};

/* Rest of the file autogenerates thin wrappers for the rest of the API calls and takes care of the typing. */

// The generated client contains the following autogenerated middleware helpers, which must be filtered out
const GeneratedMiddlewareFns = ["withMiddleware", "withPreMiddleware", "withPostMiddleware"] as const;
type GeneratedMiddlewareFns = typeof GeneratedMiddlewareFns[number];
// For every 'foo() => Promise<T>' function, the generated client
// has a 'fooRaw() => <Promise<ApiResponse<T>>' counterpart. These must be filtered out.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
type RawApiResponse = Promise<interbtcIndex.ApiResponse<any>>;

export type ExplicitlyWrappedIndexAPI = ReturnType<typeof explicitWrappers>;

export type ThinWrappedIndexAPI = Pick<
    interbtcIndex.IndexApi,
    {
        [ApiFn in keyof interbtcIndex.IndexApi]-?: ReturnType<interbtcIndex.IndexApi[ApiFn]> extends RawApiResponse
            ? never
            : ApiFn extends GeneratedMiddlewareFns
            ? never
            : ApiFn extends keyof ExplicitlyWrappedIndexAPI
            ? never
            : ApiFn;
    }[keyof interbtcIndex.IndexApi]
>;

export type WrappedIndexAPI = ThinWrappedIndexAPI & ExplicitlyWrappedIndexAPI;

export const DefaultIndexAPI: (configuration: interbtcIndex.Configuration) => WrappedIndexAPI = (configuration) => {
    const index = new interbtcIndex.IndexApi(configuration);

    const instantiatedExplicitWrappers = explicitWrappers(index);

    const excludeFromThinWrappers = (key: string) =>
        Object.keys(explicitWrappers).includes(key) ||
        (GeneratedMiddlewareFns as readonly string[]).includes(key) ||
        key.includes("Raw") ||
        key === "constructor";
    const keys = (Object.getOwnPropertyNames(Object.getPrototypeOf(index)) as (keyof typeof index)[]).filter(
        (apiName) => !excludeFromThinWrappers(apiName)
    );

    const thinWrappers = Object.fromEntries(
        keys.map((apiName) => {
            return [
                apiName,
                // all functions only have one arg
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                (arg?: any) => {
                    return index[apiName](arg);
                },
            ];
        })
    ) as ThinWrappedIndexAPI;

    return {
        ...instantiatedExplicitWrappers,
        ...thinWrappers,
    };
};
