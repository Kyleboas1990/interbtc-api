[
  1635018093,
  {
    "V14": {
      "types": {
        "types": [
          {
            "id": 0,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "AccountId32"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1,
            "type": {
              "def": {
                "array": {
                  "len": 32,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 2,
            "type": {
              "def": {
                "primitive": "u8"
              }
            }
          },
          {
            "id": 3,
            "type": {
              "path": [
                "frame_system",
                "AccountInfo"
              ],
              "params": [
                {
                  "name": "Index",
                  "type": 4
                },
                {
                  "name": "AccountData",
                  "type": 5
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "Index"
                    },
                    {
                      "name": "consumers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "providers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "sufficients",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "data",
                      "type": 5,
                      "typeName": "AccountData"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 4,
            "type": {
              "def": {
                "primitive": "u32"
              }
            }
          },
          {
            "id": 5,
            "type": {
              "path": [
                "pallet_balances",
                "AccountData"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "misc_frozen",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "fee_frozen",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 6,
            "type": {
              "def": {
                "primitive": "u128"
              }
            }
          },
          {
            "id": 7,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 8,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 8,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 8,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 8,
            "type": {
              "def": {
                "primitive": "u64"
              }
            }
          },
          {
            "id": 9,
            "type": {
              "path": [
                "primitive_types",
                "H256"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 10,
            "type": {
              "def": {
                "sequence": {
                  "type": 2
                }
              }
            }
          },
          {
            "id": 11,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "Digest"
              ],
              "params": [
                {
                  "name": "Hash",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "logs",
                      "type": 12,
                      "typeName": "Vec<DigestItem<Hash>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 12,
            "type": {
              "def": {
                "sequence": {
                  "type": 13
                }
              }
            }
          },
          {
            "id": 13,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "DigestItem"
              ],
              "params": [
                {
                  "name": "Hash",
                  "type": 9
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ChangesTrieRoot",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "Hash"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "PreRuntime",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Consensus",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Seal",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "ChangesTrieSignal",
                      "fields": [
                        {
                          "type": 15,
                          "typeName": "ChangesTrieSignal"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "RuntimeEnvironmentUpdated",
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 14,
            "type": {
              "def": {
                "array": {
                  "len": 4,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 15,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "ChangesTrieSignal"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewConfiguration",
                      "fields": [
                        {
                          "type": 16,
                          "typeName": "Option<ChangesTrieConfiguration>"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 16,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 17
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 17
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 17,
            "type": {
              "path": [
                "sp_core",
                "changes_trie",
                "ChangesTrieConfiguration"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "digest_interval",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "digest_levels",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 18,
            "type": {
              "def": {
                "sequence": {
                  "type": 19
                }
              }
            }
          },
          {
            "id": 19,
            "type": {
              "path": [
                "frame_system",
                "EventRecord"
              ],
              "params": [
                {
                  "name": "E",
                  "type": 20
                },
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "phase",
                      "type": 84,
                      "typeName": "Phase"
                    },
                    {
                      "name": "event",
                      "type": 20,
                      "typeName": "E"
                    },
                    {
                      "name": "topics",
                      "type": 85,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 20,
            "type": {
              "path": [
                "interbtc_runtime_standalone",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 21,
                          "typeName": "frame_system::Event<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "type": 28,
                          "typeName": "pallet_sudo::Event<Runtime>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "type": 31,
                          "typeName": "pallet_utility::Event"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "type": 32,
                          "typeName": "pallet_scheduler::Event<Runtime>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Tokens",
                      "fields": [
                        {
                          "type": 35,
                          "typeName": "orml_tokens::Event<Runtime>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Rewards",
                      "fields": [
                        {
                          "type": 37,
                          "typeName": "reward::Event<Runtime>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Staking",
                      "fields": [
                        {
                          "type": 42,
                          "typeName": "staking::Event<Runtime>"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "BTCRelay",
                      "fields": [
                        {
                          "type": 43,
                          "typeName": "btc_relay::Event<Runtime>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Security",
                      "fields": [
                        {
                          "type": 45,
                          "typeName": "security::Event<Runtime>"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Relay",
                      "fields": [
                        {
                          "type": 49,
                          "typeName": "relay::Event<Runtime>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "VaultRegistry",
                      "fields": [
                        {
                          "type": 50,
                          "typeName": "vault_registry::Event<Runtime>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "Oracle",
                      "fields": [
                        {
                          "type": 58,
                          "typeName": "oracle::Event<Runtime>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "Issue",
                      "fields": [
                        {
                          "type": 63,
                          "typeName": "issue::Event<Runtime>"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "Redeem",
                      "fields": [
                        {
                          "type": 64,
                          "typeName": "redeem::Event<Runtime>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "Replace",
                      "fields": [
                        {
                          "type": 66,
                          "typeName": "replace::Event<Runtime>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "Refund",
                      "fields": [
                        {
                          "type": 67,
                          "typeName": "refund::Event<Runtime>"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Nomination",
                      "fields": [
                        {
                          "type": 68,
                          "typeName": "nomination::Event<Runtime>"
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Democracy",
                      "fields": [
                        {
                          "type": 69,
                          "typeName": "pallet_democracy::Event<Runtime>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "TechnicalCommittee",
                      "fields": [
                        {
                          "type": 73,
                          "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance2>"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "TechnicalMembership",
                      "fields": [
                        {
                          "type": 74,
                          "typeName": "pallet_membership::Event<Runtime>"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "type": 75,
                          "typeName": "pallet_treasury::Event<Runtime>"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "ElectionsPhragmen",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "pallet_elections_phragmen::Event<Runtime>"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "Grandpa",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "pallet_grandpa::Event"
                        }
                      ],
                      "index": 28
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 21,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExtrinsicSuccess",
                      "fields": [
                        {
                          "type": 22,
                          "typeName": "DispatchInfo"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An extrinsic completed successfully. \\[info\\]"
                      ]
                    },
                    {
                      "name": "ExtrinsicFailed",
                      "fields": [
                        {
                          "type": 25,
                          "typeName": "DispatchError"
                        },
                        {
                          "type": 22,
                          "typeName": "DispatchInfo"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An extrinsic failed. \\[error, info\\]"
                      ]
                    },
                    {
                      "name": "CodeUpdated",
                      "index": 2,
                      "docs": [
                        "`:code` was updated."
                      ]
                    },
                    {
                      "name": "NewAccount",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new \\[account\\] was created."
                      ]
                    },
                    {
                      "name": "KilledAccount",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An \\[account\\] was reaped."
                      ]
                    },
                    {
                      "name": "Remarked",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "On on-chain remark happened. \\[origin, remark_hash\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Event for the System pallet."
              ]
            }
          },
          {
            "id": 22,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "DispatchInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "weight",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "class",
                      "type": 23,
                      "typeName": "DispatchClass"
                    },
                    {
                      "name": "pays_fee",
                      "type": 24,
                      "typeName": "Pays"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 23,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "DispatchClass"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Normal",
                      "index": 0
                    },
                    {
                      "name": "Operational",
                      "index": 1
                    },
                    {
                      "name": "Mandatory",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 24,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "Pays"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Yes",
                      "index": 0
                    },
                    {
                      "name": "No",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 25,
            "type": {
              "path": [
                "sp_runtime",
                "DispatchError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Other",
                      "index": 0
                    },
                    {
                      "name": "CannotLookup",
                      "index": 1
                    },
                    {
                      "name": "BadOrigin",
                      "index": 2
                    },
                    {
                      "name": "Module",
                      "fields": [
                        {
                          "name": "index",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "error",
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "ConsumerRemaining",
                      "index": 4
                    },
                    {
                      "name": "NoProviders",
                      "index": 5
                    },
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "type": 26,
                          "typeName": "TokenError"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Arithmetic",
                      "fields": [
                        {
                          "type": 27,
                          "typeName": "ArithmeticError"
                        }
                      ],
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 26,
            "type": {
              "path": [
                "sp_runtime",
                "TokenError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoFunds",
                      "index": 0
                    },
                    {
                      "name": "WouldDie",
                      "index": 1
                    },
                    {
                      "name": "BelowMinimum",
                      "index": 2
                    },
                    {
                      "name": "CannotCreate",
                      "index": 3
                    },
                    {
                      "name": "UnknownAsset",
                      "index": 4
                    },
                    {
                      "name": "Frozen",
                      "index": 5
                    },
                    {
                      "name": "Unsupported",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 27,
            "type": {
              "path": [
                "sp_runtime",
                "ArithmeticError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Underflow",
                      "index": 0
                    },
                    {
                      "name": "Overflow",
                      "index": 1
                    },
                    {
                      "name": "DivisionByZero",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 28,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Sudid",
                      "fields": [
                        {
                          "type": 29,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A sudo just took place. \\[result\\]"
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The \\[sudoer\\] just switched identity; the old key is supplied."
                      ]
                    },
                    {
                      "name": "SudoAsDone",
                      "fields": [
                        {
                          "type": 29,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A sudo just took place. \\[result\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 29,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 30
                },
                {
                  "name": "E",
                  "type": 25
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 30
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 25
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 30,
            "type": {
              "def": {
                "tuple": []
              }
            }
          },
          {
            "id": 31,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BatchInterrupted",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "type": 25,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                        "well as the error. \\[index, error\\]"
                      ]
                    },
                    {
                      "name": "BatchCompleted",
                      "index": 1,
                      "docs": [
                        "Batch of dispatches completed fully with no error."
                      ]
                    },
                    {
                      "name": "ItemCompleted",
                      "index": 2,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with no error."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 32,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Scheduled",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Scheduled some task. \\[when, index\\]"
                      ]
                    },
                    {
                      "name": "Canceled",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Canceled some task. \\[when, index\\]"
                      ]
                    },
                    {
                      "name": "Dispatched",
                      "fields": [
                        {
                          "type": 33,
                          "typeName": "TaskAddress<T::BlockNumber>"
                        },
                        {
                          "type": 34,
                          "typeName": "Option<Vec<u8>>"
                        },
                        {
                          "type": 29,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Dispatched some task. \\[task, id, result\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": 33,
            "type": {
              "def": {
                "tuple": [
                  4,
                  4
                ]
              }
            }
          },
          {
            "id": 34,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 10
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 10
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 35,
            "type": {
              "path": [
                "orml_tokens",
                "module",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "type": 36,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account was created with some free balance. \\[currency_id,",
                        "account, free_balance\\]"
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "type": 36,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below",
                        "ExistentialDeposit, resulting in an outright loss. \\[currency_id,",
                        "account, balance\\]"
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "type": 36,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer succeeded. \\[currency_id, from, to, value\\]"
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "type": 36,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved).",
                        "\\[currency_id, who, value\\]"
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "type": 36,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free).",
                        "\\[currency_id, who, value\\]"
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "type": 36,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A balance was set by root. \\[who, free, reserved\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 36,
            "type": {
              "path": [
                "interbtc_primitives",
                "CurrencyId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "DOT",
                      "index": 0
                    },
                    {
                      "name": "INTERBTC",
                      "index": 1
                    },
                    {
                      "name": "INTR",
                      "index": 2
                    },
                    {
                      "name": "KSM",
                      "index": 3
                    },
                    {
                      "name": "KBTC",
                      "index": 4
                    },
                    {
                      "name": "KINT",
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 37,
            "type": {
              "path": [
                "reward",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "DepositStake",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 40,
                          "typeName": "T::SignedFixedPoint"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "DistributeReward",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 36,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 40,
                          "typeName": "T::SignedFixedPoint"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "WithdrawStake",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 40,
                          "typeName": "T::SignedFixedPoint"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "WithdrawReward",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 36,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 40,
                          "typeName": "T::SignedFixedPoint"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 38,
            "type": {
              "path": [
                "interbtc_primitives",
                "VaultId"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "CurrencyId",
                  "type": 36
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account_id",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "currencies",
                      "type": 39,
                      "typeName": "VaultCurrencyPair<CurrencyId>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 39,
            "type": {
              "path": [
                "interbtc_primitives",
                "VaultCurrencyPair"
              ],
              "params": [
                {
                  "name": "CurrencyId",
                  "type": 36
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "collateral",
                      "type": 36,
                      "typeName": "CurrencyId"
                    },
                    {
                      "name": "wrapped",
                      "type": 36,
                      "typeName": "CurrencyId"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 40,
            "type": {
              "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedI128"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 41,
                      "typeName": "i128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 41,
            "type": {
              "def": {
                "primitive": "i128"
              }
            }
          },
          {
            "id": 42,
            "type": {
              "path": [
                "staking",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "DepositStake",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "nominator_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 40,
                          "typeName": "T::SignedFixedPoint"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "DistributeReward",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 36,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 40,
                          "typeName": "T::SignedFixedPoint"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "WithdrawStake",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "nominator_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 40,
                          "typeName": "T::SignedFixedPoint"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "WithdrawReward",
                      "fields": [
                        {
                          "name": "nonce",
                          "type": 4,
                          "typeName": "T::Index"
                        },
                        {
                          "name": "currency_id",
                          "type": 36,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "nominator_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 40,
                          "typeName": "T::SignedFixedPoint"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "ForceRefund",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "IncreaseNonce",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "new_nonce",
                          "type": 4,
                          "typeName": "T::Index"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 43,
            "type": {
              "path": [
                "btc_relay",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Initialized",
                      "fields": [
                        {
                          "name": "block_height",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "block_hash",
                          "type": 44,
                          "typeName": "H256Le"
                        },
                        {
                          "name": "relayer_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "StoreMainChainHeader",
                      "fields": [
                        {
                          "name": "block_height",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "block_hash",
                          "type": 44,
                          "typeName": "H256Le"
                        },
                        {
                          "name": "relayer_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "StoreForkHeader",
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "fork_height",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "block_hash",
                          "type": 44,
                          "typeName": "H256Le"
                        },
                        {
                          "name": "relayer_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ChainReorg",
                      "fields": [
                        {
                          "name": "new_chain_tip_hash",
                          "type": 44,
                          "typeName": "H256Le"
                        },
                        {
                          "name": "new_chain_tip_height",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "fork_depth",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "ForkAheadOfMainChain",
                      "fields": [
                        {
                          "name": "main_chain_height",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "fork_height",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "fork_id",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 44,
            "type": {
              "path": [
                "bitcoin",
                "types",
                "H256Le"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "content",
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 45,
            "type": {
              "path": [
                "security",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RecoverFromErrors",
                      "fields": [
                        {
                          "name": "new_status",
                          "type": 46,
                          "typeName": "StatusCode"
                        },
                        {
                          "name": "cleared_errors",
                          "type": 47,
                          "typeName": "Vec<ErrorCode>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "UpdateActiveBlock",
                      "fields": [
                        {
                          "name": "block_number",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 46,
            "type": {
              "path": [
                "security",
                "types",
                "StatusCode"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Running",
                      "index": 0
                    },
                    {
                      "name": "Error",
                      "index": 1
                    },
                    {
                      "name": "Shutdown",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 47,
            "type": {
              "def": {
                "sequence": {
                  "type": 48
                }
              }
            }
          },
          {
            "id": 48,
            "type": {
              "path": [
                "security",
                "types",
                "ErrorCode"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "OracleOffline",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 49,
            "type": {
              "path": [
                "relay",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VaultTheft",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "tx_id",
                          "type": 44,
                          "typeName": "H256Le"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "VaultDoublePayment",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "tx_id_1",
                          "type": 44,
                          "typeName": "H256Le"
                        },
                        {
                          "name": "tx_id_2",
                          "type": 44,
                          "typeName": "H256Le"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 50,
            "type": {
              "path": [
                "vault_registry",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RegisterVault",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "DepositCollateral",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "new_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "total_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "free_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "WithdrawCollateral",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "withdrawn_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "total_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "UpdatePublicKey",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "public_key",
                          "type": 51,
                          "typeName": "BtcPublicKey"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "RegisterAddress",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "address",
                          "type": 53,
                          "typeName": "BtcAddress"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "IncreaseToBeIssuedTokens",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "increase",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "DecreaseToBeIssuedTokens",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "decrease",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "IssueTokens",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "increase",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "IncreaseToBeRedeemedTokens",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "increase",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "DecreaseToBeRedeemedTokens",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "decrease",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "IncreaseToBeReplacedTokens",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "increase",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "DecreaseToBeReplacedTokens",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "decrease",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "DecreaseTokens",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "user_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "decrease",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "RedeemTokens",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "redeemed_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "RedeemTokensPremium",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "redeemed_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "user_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "RedeemTokensLiquidatedVault",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "tokens",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "RedeemTokensLiquidation",
                      "fields": [
                        {
                          "name": "redeemer_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "burned_tokens",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "transferred_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "ReplaceTokens",
                      "fields": [
                        {
                          "name": "old_vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "new_vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "additional_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "LiquidateVault",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "issued_tokens",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "to_be_issued_tokens",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "to_be_redeemed_tokens",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "to_be_replaced_tokens",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "backing_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "status",
                          "type": 56,
                          "typeName": "VaultStatus"
                        },
                        {
                          "name": "replace_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BanVault",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "banned_until",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 19
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 51,
            "type": {
              "path": [
                "bitcoin",
                "address",
                "PublicKey"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 52,
                      "typeName": "[u8; PUBLIC_KEY_SIZE]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 52,
            "type": {
              "def": {
                "array": {
                  "len": 33,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 53,
            "type": {
              "path": [
                "bitcoin",
                "address",
                "Address"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "P2PKH",
                      "fields": [
                        {
                          "type": 54,
                          "typeName": "H160"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "P2SH",
                      "fields": [
                        {
                          "type": 54,
                          "typeName": "H160"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "P2WPKHv0",
                      "fields": [
                        {
                          "type": 54,
                          "typeName": "H160"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "P2WSHv0",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "H256"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 54,
            "type": {
              "path": [
                "primitive_types",
                "H160"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 55,
                      "typeName": "[u8; 20]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 55,
            "type": {
              "def": {
                "array": {
                  "len": 20,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 56,
            "type": {
              "path": [
                "vault_registry",
                "types",
                "VaultStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Active",
                      "fields": [
                        {
                          "type": 57,
                          "typeName": "bool"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Liquidated",
                      "index": 1
                    },
                    {
                      "name": "CommittedTheft",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 57,
            "type": {
              "def": {
                "primitive": "bool"
              }
            }
          },
          {
            "id": 58,
            "type": {
              "path": [
                "oracle",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FeedValues",
                      "fields": [
                        {
                          "name": "oracle_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "values",
                          "type": 59,
                          "typeName": "Vec<(OracleKey, T::UnsignedFixedPoint)>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Event emitted when exchange rate is set"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 59,
            "type": {
              "def": {
                "sequence": {
                  "type": 60
                }
              }
            }
          },
          {
            "id": 60,
            "type": {
              "def": {
                "tuple": [
                  61,
                  62
                ]
              }
            }
          },
          {
            "id": 61,
            "type": {
              "path": [
                "interbtc_primitives",
                "oracle",
                "Key"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExchangeRate",
                      "fields": [
                        {
                          "type": 36,
                          "typeName": "CurrencyId"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "FeeEstimation",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 62,
            "type": {
              "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedU128"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "u128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 63,
            "type": {
              "path": [
                "issue",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RequestIssue",
                      "fields": [
                        {
                          "name": "issue_id",
                          "type": 9,
                          "typeName": "H256"
                        },
                        {
                          "name": "requester",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Wrapped<T>"
                        },
                        {
                          "name": "fee",
                          "type": 6,
                          "typeName": "Wrapped<T>"
                        },
                        {
                          "name": "griefing_collateral",
                          "type": 6,
                          "typeName": "Collateral<T>"
                        },
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "vault_address",
                          "type": 53,
                          "typeName": "BtcAddress"
                        },
                        {
                          "name": "vault_public_key",
                          "type": 51,
                          "typeName": "BtcPublicKey"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "IssueAmountChange",
                      "fields": [
                        {
                          "name": "issue_id",
                          "type": 9,
                          "typeName": "H256"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Wrapped<T>"
                        },
                        {
                          "name": "fee",
                          "type": 6,
                          "typeName": "Wrapped<T>"
                        },
                        {
                          "name": "confiscated_griefing_collateral",
                          "type": 6,
                          "typeName": "Collateral<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ExecuteIssue",
                      "fields": [
                        {
                          "name": "issue_id",
                          "type": 9,
                          "typeName": "H256"
                        },
                        {
                          "name": "requester",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Wrapped<T>"
                        },
                        {
                          "name": "fee",
                          "type": 6,
                          "typeName": "Wrapped<T>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "CancelIssue",
                      "fields": [
                        {
                          "name": "issue_id",
                          "type": 9,
                          "typeName": "H256"
                        },
                        {
                          "name": "requester",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "griefing_collateral",
                          "type": 6,
                          "typeName": "Collateral<T>"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 64,
            "type": {
              "path": [
                "redeem",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RequestRedeem",
                      "fields": [
                        {
                          "name": "redeem_id",
                          "type": 9,
                          "typeName": "H256"
                        },
                        {
                          "name": "redeemer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Wrapped<T>"
                        },
                        {
                          "name": "fee",
                          "type": 6,
                          "typeName": "Wrapped<T>"
                        },
                        {
                          "name": "premium",
                          "type": 6,
                          "typeName": "Collateral<T>"
                        },
                        {
                          "name": "btc_address",
                          "type": 53,
                          "typeName": "BtcAddress"
                        },
                        {
                          "name": "transfer_fee",
                          "type": 6,
                          "typeName": "Wrapped<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "LiquidationRedeem",
                      "fields": [
                        {
                          "name": "redeemer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Wrapped<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ExecuteRedeem",
                      "fields": [
                        {
                          "name": "redeem_id",
                          "type": 9,
                          "typeName": "H256"
                        },
                        {
                          "name": "redeemer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Wrapped<T>"
                        },
                        {
                          "name": "fee",
                          "type": 6,
                          "typeName": "Wrapped<T>"
                        },
                        {
                          "name": "transfer_fee",
                          "type": 6,
                          "typeName": "Wrapped<T>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "CancelRedeem",
                      "fields": [
                        {
                          "name": "redeem_id",
                          "type": 9,
                          "typeName": "H256"
                        },
                        {
                          "name": "redeemer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "slashed_amount",
                          "type": 6,
                          "typeName": "Collateral<T>"
                        },
                        {
                          "name": "status",
                          "type": 65,
                          "typeName": "RedeemRequestStatus"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "MintTokensForReimbursedRedeem",
                      "fields": [
                        {
                          "name": "redeem_id",
                          "type": 9,
                          "typeName": "H256"
                        },
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Wrapped<T>"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 65,
            "type": {
              "path": [
                "interbtc_primitives",
                "redeem",
                "RedeemRequestStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Pending",
                      "index": 0
                    },
                    {
                      "name": "Completed",
                      "index": 1
                    },
                    {
                      "name": "Reimbursed",
                      "fields": [
                        {
                          "type": 57,
                          "typeName": "bool"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Retried",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 66,
            "type": {
              "path": [
                "replace",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RequestReplace",
                      "fields": [
                        {
                          "name": "old_vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Wrapped<T>"
                        },
                        {
                          "name": "griefing_collateral",
                          "type": 6,
                          "typeName": "Collateral<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "WithdrawReplace",
                      "fields": [
                        {
                          "name": "old_vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "withdrawn_tokens",
                          "type": 6,
                          "typeName": "Wrapped<T>"
                        },
                        {
                          "name": "withdrawn_griefing_collateral",
                          "type": 6,
                          "typeName": "Collateral<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AcceptReplace",
                      "fields": [
                        {
                          "name": "replace_id",
                          "type": 9,
                          "typeName": "H256"
                        },
                        {
                          "name": "old_vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "new_vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Wrapped<T>"
                        },
                        {
                          "name": "collateral",
                          "type": 6,
                          "typeName": "Collateral<T>"
                        },
                        {
                          "name": "btc_address",
                          "type": 53,
                          "typeName": "BtcAddress"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ExecuteReplace",
                      "fields": [
                        {
                          "name": "replace_id",
                          "type": 9,
                          "typeName": "H256"
                        },
                        {
                          "name": "old_vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "new_vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "CancelReplace",
                      "fields": [
                        {
                          "name": "replace_id",
                          "type": 9,
                          "typeName": "H256"
                        },
                        {
                          "name": "new_vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "old_vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "griefing_collateral",
                          "type": 6,
                          "typeName": "Collateral<T>"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 67,
            "type": {
              "path": [
                "refund",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RequestRefund",
                      "fields": [
                        {
                          "name": "refund_id",
                          "type": 9,
                          "typeName": "H256"
                        },
                        {
                          "name": "issuer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Wrapped<T>"
                        },
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "btc_address",
                          "type": 53,
                          "typeName": "BtcAddress"
                        },
                        {
                          "name": "issue_id",
                          "type": 9,
                          "typeName": "H256"
                        },
                        {
                          "name": "fee",
                          "type": 6,
                          "typeName": "Wrapped<T>"
                        },
                        {
                          "name": "transfer_fee",
                          "type": 6,
                          "typeName": "Wrapped<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ExecuteRefund",
                      "fields": [
                        {
                          "name": "refund_id",
                          "type": 9,
                          "typeName": "H256"
                        },
                        {
                          "name": "issuer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Wrapped<T>"
                        },
                        {
                          "name": "fee",
                          "type": 6,
                          "typeName": "Wrapped<T>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 68,
            "type": {
              "path": [
                "nomination",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NominationOptIn",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "NominationOptOut",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "DepositCollateral",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "nominator_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Collateral<T>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "WithdrawCollateral",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "nominator_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Collateral<T>"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 69,
            "type": {
              "path": [
                "pallet_democracy",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "PropIndex"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion has been proposed by a public account. \\[proposal_index, deposit\\]"
                      ]
                    },
                    {
                      "name": "Tabled",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "PropIndex"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 70,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A public proposal has been tabled for referendum vote. \\[proposal_index, deposit,",
                        "depositors\\]"
                      ]
                    },
                    {
                      "name": "ExternalTabled",
                      "index": 2,
                      "docs": [
                        "An external proposal has been tabled."
                      ]
                    },
                    {
                      "name": "Started",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        },
                        {
                          "type": 71,
                          "typeName": "VoteThreshold"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A referendum has begun. \\[ref_index, threshold\\]"
                      ]
                    },
                    {
                      "name": "Passed",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A proposal has been approved by referendum. \\[ref_index\\]"
                      ]
                    },
                    {
                      "name": "NotPassed",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A proposal has been rejected by referendum. \\[ref_index\\]"
                      ]
                    },
                    {
                      "name": "Cancelled",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A referendum has been cancelled. \\[ref_index\\]"
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        },
                        {
                          "type": 29,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A proposal has been enacted. \\[ref_index, result\\]"
                      ]
                    },
                    {
                      "name": "Delegated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "An account has delegated their vote to another account. \\[who, target\\]"
                      ]
                    },
                    {
                      "name": "Undelegated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "An \\[account\\] has cancelled a previous delegation operation."
                      ]
                    },
                    {
                      "name": "Vetoed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "An external proposal has been vetoed. \\[who, proposal_hash, until\\]"
                      ]
                    },
                    {
                      "name": "PreimageNoted",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "A proposal's preimage was noted, and the deposit taken. \\[proposal_hash, who, deposit\\]"
                      ]
                    },
                    {
                      "name": "PreimageUsed",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "A proposal preimage was removed and used (the deposit was returned).",
                        "\\[proposal_hash, provider, deposit\\]"
                      ]
                    },
                    {
                      "name": "PreimageInvalid",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "A proposal could not be executed because its preimage was invalid.",
                        "\\[proposal_hash, ref_index\\]"
                      ]
                    },
                    {
                      "name": "PreimageMissing",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "A proposal could not be executed because its preimage was missing.",
                        "\\[proposal_hash, ref_index\\]"
                      ]
                    },
                    {
                      "name": "PreimageReaped",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "A registered preimage was removed and the deposit collected by the reaper.",
                        "\\[proposal_hash, provider, deposit, reaper\\]"
                      ]
                    },
                    {
                      "name": "Blacklisted",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "A proposal \\[hash\\] has been blacklisted permanently."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 70,
            "type": {
              "def": {
                "sequence": {
                  "type": 0
                }
              }
            }
          },
          {
            "id": 71,
            "type": {
              "path": [
                "pallet_democracy",
                "vote_threshold",
                "VoteThreshold"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SuperMajorityApprove",
                      "index": 0
                    },
                    {
                      "name": "SuperMajorityAgainst",
                      "index": 1
                    },
                    {
                      "name": "SimpleMajority",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 72,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion (given hash) has been proposed (by given account) with a threshold (given",
                        "`MemberCount`).",
                        "\\[account, proposal_index, proposal_hash, threshold\\]"
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "type": 57,
                          "typeName": "bool"
                        },
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A motion (given hash) has been voted on by given account, leaving",
                        "a tally (yes votes and no votes given respectively as `MemberCount`).",
                        "\\[account, proposal_hash, voted, yes, no\\]"
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A motion was approved by the required threshold.",
                        "\\[proposal_hash\\]"
                      ]
                    },
                    {
                      "name": "Disapproved",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A motion was not approved by the required threshold.",
                        "\\[proposal_hash\\]"
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "type": 29,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A motion was executed; result will be `Ok` if it returned without error.",
                        "\\[proposal_hash, result\\]"
                      ]
                    },
                    {
                      "name": "MemberExecuted",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "type": 29,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A single member did some action; result will be `Ok` if it returned without error.",
                        "\\[proposal_hash, result\\]"
                      ]
                    },
                    {
                      "name": "Closed",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A proposal was closed because its threshold was reached or after its duration was up.",
                        "\\[proposal_hash, yes, no\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 73,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion (given hash) has been proposed (by given account) with a threshold (given",
                        "`MemberCount`).",
                        "\\[account, proposal_index, proposal_hash, threshold\\]"
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "type": 57,
                          "typeName": "bool"
                        },
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A motion (given hash) has been voted on by given account, leaving",
                        "a tally (yes votes and no votes given respectively as `MemberCount`).",
                        "\\[account, proposal_hash, voted, yes, no\\]"
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A motion was approved by the required threshold.",
                        "\\[proposal_hash\\]"
                      ]
                    },
                    {
                      "name": "Disapproved",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A motion was not approved by the required threshold.",
                        "\\[proposal_hash\\]"
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "type": 29,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A motion was executed; result will be `Ok` if it returned without error.",
                        "\\[proposal_hash, result\\]"
                      ]
                    },
                    {
                      "name": "MemberExecuted",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "type": 29,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A single member did some action; result will be `Ok` if it returned without error.",
                        "\\[proposal_hash, result\\]"
                      ]
                    },
                    {
                      "name": "Closed",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A proposal was closed because its threshold was reached or after its duration was up.",
                        "\\[proposal_hash, yes, no\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 74,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MemberAdded",
                      "index": 0,
                      "docs": [
                        "The given member was added; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MemberRemoved",
                      "index": 1,
                      "docs": [
                        "The given member was removed; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MembersSwapped",
                      "index": 2,
                      "docs": [
                        "Two members were swapped; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MembersReset",
                      "index": 3,
                      "docs": [
                        "The membership was reset; see the transaction for who the new set is."
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "index": 4,
                      "docs": [
                        "One of the members' keys changed."
                      ]
                    },
                    {
                      "name": "Dummy",
                      "index": 5,
                      "docs": [
                        "Phantom member, never used."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 75,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ProposalIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New proposal. \\[proposal_index\\]"
                      ]
                    },
                    {
                      "name": "Spending",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "We have ended a spend period and will now allocate funds. \\[budget_remaining\\]"
                      ]
                    },
                    {
                      "name": "Awarded",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Some funds have been allocated. \\[proposal_index, award, beneficiary\\]"
                      ]
                    },
                    {
                      "name": "Rejected",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A proposal was rejected; funds were slashed. \\[proposal_index, slashed\\]"
                      ]
                    },
                    {
                      "name": "Burnt",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some of our funds have been burnt. \\[burn\\]"
                      ]
                    },
                    {
                      "name": "Rollover",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Spending has finished; this is the amount that rolls over until next spend.",
                        "\\[budget_remaining\\]"
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some funds have been deposited. \\[deposit\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 76,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewTerm",
                      "fields": [
                        {
                          "type": 77,
                          "typeName": "Vec<(<T as frame_system::Config>::AccountId, BalanceOf<T>)>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new term with \\[new_members\\]. This indicates that enough candidates existed to run",
                        "the election, not that enough have has been elected. The inner value must be examined",
                        "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond",
                        "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to",
                        "begin with."
                      ]
                    },
                    {
                      "name": "EmptyTerm",
                      "index": 1,
                      "docs": [
                        "No (or not enough) candidates existed for this round. This is different from",
                        "`NewTerm(\\[\\])`. See the description of `NewTerm`."
                      ]
                    },
                    {
                      "name": "ElectionError",
                      "index": 2,
                      "docs": [
                        "Internal error happened while trying to perform election."
                      ]
                    },
                    {
                      "name": "MemberKicked",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A \\[member\\] has been removed. This should always be followed by either `NewTerm` or",
                        "`EmptyTerm`."
                      ]
                    },
                    {
                      "name": "Renounced",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Someone has renounced their candidacy."
                      ]
                    },
                    {
                      "name": "CandidateSlashed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A \\[candidate\\] was slashed by \\[amount\\] due to failing to obtain a seat as member or",
                        "runner-up.",
                        "",
                        "Note that old members and runners-up are also candidates."
                      ]
                    },
                    {
                      "name": "SeatHolderSlashed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A \\[seat holder\\] was slashed by \\[amount\\] by being forcefully removed from the set."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 77,
            "type": {
              "def": {
                "sequence": {
                  "type": 78
                }
              }
            }
          },
          {
            "id": 78,
            "type": {
              "def": {
                "tuple": [
                  0,
                  6
                ]
              }
            }
          },
          {
            "id": 79,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewAuthorities",
                      "fields": [
                        {
                          "type": 80,
                          "typeName": "AuthorityList"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New authority set has been applied. \\[authority_set\\]"
                      ]
                    },
                    {
                      "name": "Paused",
                      "index": 1,
                      "docs": [
                        "Current authority set has been paused."
                      ]
                    },
                    {
                      "name": "Resumed",
                      "index": 2,
                      "docs": [
                        "Current authority set has been resumed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 80,
            "type": {
              "def": {
                "sequence": {
                  "type": 81
                }
              }
            }
          },
          {
            "id": 81,
            "type": {
              "def": {
                "tuple": [
                  82,
                  8
                ]
              }
            }
          },
          {
            "id": 82,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "app",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 83,
                      "typeName": "ed25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 83,
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 84,
            "type": {
              "path": [
                "frame_system",
                "Phase"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ApplyExtrinsic",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Finalization",
                      "index": 1
                    },
                    {
                      "name": "Initialization",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 85,
            "type": {
              "def": {
                "sequence": {
                  "type": 9
                }
              }
            }
          },
          {
            "id": 86,
            "type": {
              "def": {
                "sequence": {
                  "type": 33
                }
              }
            }
          },
          {
            "id": 87,
            "type": {
              "path": [
                "frame_system",
                "LastRuntimeUpgradeInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_version",
                      "type": 88,
                      "typeName": "codec::Compact<u32>"
                    },
                    {
                      "name": "spec_name",
                      "type": 89,
                      "typeName": "sp_runtime::RuntimeString"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 88,
            "type": {
              "def": {
                "compact": {
                  "type": 4
                }
              }
            }
          },
          {
            "id": 89,
            "type": {
              "def": {
                "primitive": "str"
              }
            }
          },
          {
            "id": 90,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "fill_block",
                      "fields": [
                        {
                          "name": "ratio",
                          "type": 91,
                          "typeName": "Perbill"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A dispatch that will fill the block weight up to the given ratio."
                      ]
                    },
                    {
                      "name": "remark",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Make some on-chain remark.",
                        "",
                        "# <weight>",
                        "- `O(1)`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_heap_pages",
                      "fields": [
                        {
                          "name": "pages",
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the number of pages in the WebAssembly environment's heap.",
                        "",
                        "# <weight>",
                        "- `O(1)`",
                        "- 1 storage write.",
                        "- Base Weight: 1.405 µs",
                        "- 1 write to HEAP_PAGES",
                        "- 1 digest item",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the new runtime code.",
                        "",
                        "# <weight>",
                        "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
                        "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is",
                        "  expensive).",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime, but generally this is very",
                        "expensive. We will treat this as a full block.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_code_without_checks",
                      "fields": [
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the new runtime code without doing any checks of the given `code`.",
                        "",
                        "# <weight>",
                        "- `O(C)` where `C` length of `code`",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime. We will treat this as a full",
                        "block. # </weight>"
                      ]
                    },
                    {
                      "name": "set_changes_trie_config",
                      "fields": [
                        {
                          "name": "changes_trie_config",
                          "type": 16,
                          "typeName": "Option<ChangesTrieConfiguration>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set the new changes trie configuration.",
                        "",
                        "# <weight>",
                        "- `O(1)`",
                        "- 1 storage write or delete (codec `O(1)`).",
                        "- 1 call to `deposit_log`: Uses `append` API, so O(1)",
                        "- Base Weight: 7.218 µs",
                        "- DB Weight:",
                        "    - Writes: Changes Trie, System Digest",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_storage",
                      "fields": [
                        {
                          "name": "items",
                          "type": 92,
                          "typeName": "Vec<KeyValue>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Set some items of storage.",
                        "",
                        "# <weight>",
                        "- `O(I)` where `I` length of `items`",
                        "- `I` storage writes (`O(1)`).",
                        "- Base Weight: 0.568 * i µs",
                        "- Writes: Number of items",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 94,
                          "typeName": "Vec<Key>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Kill some items from storage.",
                        "",
                        "# <weight>",
                        "- `O(IK)` where `I` length of `keys` and `K` length of one key",
                        "- `I` storage deletions.",
                        "- Base Weight: .378 * i µs",
                        "- Writes: Number of items",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "kill_prefix",
                      "fields": [
                        {
                          "name": "prefix",
                          "type": 10,
                          "typeName": "Key"
                        },
                        {
                          "name": "subkeys",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Kill all storage items with a key that starts with the given prefix.",
                        "",
                        "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                        "the prefix we are removing to accurately calculate the weight of this function.",
                        "",
                        "# <weight>",
                        "- `O(P)` where `P` amount of keys with prefix `prefix`",
                        "- `P` storage deletions.",
                        "- Base Weight: 0.834 * P µs",
                        "- Writes: Number of subkeys + 1",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remark_with_event",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Make some on-chain remark and emit event.",
                        "",
                        "# <weight>",
                        "- `O(b)` where b is the length of the remark.",
                        "- 1 event.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 91,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Perbill"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 92,
            "type": {
              "def": {
                "sequence": {
                  "type": 93
                }
              }
            }
          },
          {
            "id": 93,
            "type": {
              "def": {
                "tuple": [
                  10,
                  10
                ]
              }
            }
          },
          {
            "id": 94,
            "type": {
              "def": {
                "sequence": {
                  "type": 10
                }
              }
            }
          },
          {
            "id": 95,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockWeights"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_block",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_block",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "per_class",
                      "type": 96,
                      "typeName": "PerDispatchClass<WeightsPerClass>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 96,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 97
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 97,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 97,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 97,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 97,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "WeightsPerClass"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_extrinsic",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_extrinsic",
                      "type": 98,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "max_total",
                      "type": 98,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "reserved",
                      "type": 98,
                      "typeName": "Option<Weight>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 98,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 8
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 99,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockLength"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max",
                      "type": 100,
                      "typeName": "PerDispatchClass<u32>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 100,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 4,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 101,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "RuntimeDbWeight"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "read",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "write",
                      "type": 8,
                      "typeName": "Weight"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 102,
            "type": {
              "path": [
                "sp_version",
                "RuntimeVersion"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_name",
                      "type": 89,
                      "typeName": "RuntimeString"
                    },
                    {
                      "name": "impl_name",
                      "type": 89,
                      "typeName": "RuntimeString"
                    },
                    {
                      "name": "authoring_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "spec_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "impl_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "apis",
                      "type": 103,
                      "typeName": "ApisVec"
                    },
                    {
                      "name": "transaction_version",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 103,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 104
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 104
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 104,
            "type": {
              "def": {
                "sequence": {
                  "type": 105
                }
              }
            }
          },
          {
            "id": 105,
            "type": {
              "def": {
                "tuple": [
                  106,
                  4
                ]
              }
            }
          },
          {
            "id": 106,
            "type": {
              "def": {
                "array": {
                  "len": 8,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 107,
            "type": {
              "def": {
                "primitive": "u16"
              }
            }
          },
          {
            "id": 108,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSpecName",
                      "index": 0,
                      "docs": [
                        "The name of specification does not match between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "SpecVersionNeedsToIncrease",
                      "index": 1,
                      "docs": [
                        "The specification version is not allowed to decrease between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "FailedToExtractRuntimeVersion",
                      "index": 2,
                      "docs": [
                        "Failed to extract the runtime version from the new runtime.",
                        "",
                        "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                      ]
                    },
                    {
                      "name": "NonDefaultComposite",
                      "index": 3,
                      "docs": [
                        "Suicide called when the account has non-default composite data."
                      ]
                    },
                    {
                      "name": "NonZeroRefCount",
                      "index": 4,
                      "docs": [
                        "There is a non-zero reference count preventing the account from being purged."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the System pallet"
              ]
            }
          },
          {
            "id": 109,
            "type": {
              "path": [
                "pallet_timestamp",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set",
                      "fields": [
                        {
                          "name": "now",
                          "type": 110,
                          "typeName": "T::Moment"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current time.",
                        "",
                        "This call should be invoked exactly once per block. It will panic at the finalization",
                        "phase, if this call hasn't been invoked by that time.",
                        "",
                        "The timestamp should be greater than the previous one by the amount specified by",
                        "`MinimumPeriod`.",
                        "",
                        "The dispatch origin for this call must be `Inherent`.",
                        "",
                        "# <weight>",
                        "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                        "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
                        "  `on_finalize`)",
                        "- 1 event handler `on_timestamp_set`. Must be `O(1)`.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 110,
            "type": {
              "def": {
                "compact": {
                  "type": 8
                }
              }
            }
          },
          {
            "id": 111,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "sudo",
                      "fields": [
                        {
                          "name": "call",
                          "type": 112,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + 10,000.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "sudo_unchecked_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": 112,
                          "typeName": "Box<<T as Config>::Call>"
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "This function does not check the weight of the call, and instead allows the",
                        "Sudo user to specify the weight of the call.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- The weight of this call is defined by the caller.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
                        "key.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB change.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "sudo_as",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "call",
                          "type": 112,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                        "a given account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + 10,000.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 112,
            "type": {
              "path": [
                "interbtc_runtime_standalone",
                "Call"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 90,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Timestamp",
                      "fields": [
                        {
                          "type": 109,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "type": 111,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "type": 113,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "type": 115,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Tokens",
                      "fields": [
                        {
                          "type": 117,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Tokens, Runtime>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Rewards",
                      "fields": [
                        {
                          "type": 119,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Rewards, Runtime>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "BTCRelay",
                      "fields": [
                        {
                          "type": 120,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BTCRelay, Runtime>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Security",
                      "fields": [
                        {
                          "type": 124,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Security, Runtime>"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Relay",
                      "fields": [
                        {
                          "type": 125,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Relay, Runtime>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "VaultRegistry",
                      "fields": [
                        {
                          "type": 128,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<VaultRegistry, Runtime>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "Oracle",
                      "fields": [
                        {
                          "type": 129,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Oracle, Runtime>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "Issue",
                      "fields": [
                        {
                          "type": 130,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Issue, Runtime>"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "Redeem",
                      "fields": [
                        {
                          "type": 131,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Redeem, Runtime>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "Replace",
                      "fields": [
                        {
                          "type": 132,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Replace, Runtime>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "Fee",
                      "fields": [
                        {
                          "type": 133,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Fee, Runtime>"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "Refund",
                      "fields": [
                        {
                          "type": 134,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Refund, Runtime>"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Nomination",
                      "fields": [
                        {
                          "type": 135,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Nomination, Runtime>"
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Democracy",
                      "fields": [
                        {
                          "type": 136,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Democracy, Runtime>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "type": 140,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Council, Runtime>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "TechnicalCommittee",
                      "fields": [
                        {
                          "type": 142,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommittee, Runtime>"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "TechnicalMembership",
                      "fields": [
                        {
                          "type": 143,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalMembership, Runtime>"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "type": 144,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "ElectionsPhragmen",
                      "fields": [
                        {
                          "type": 145,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ElectionsPhragmen, Runtime>"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "Grandpa",
                      "fields": [
                        {
                          "type": 147,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>"
                        }
                      ],
                      "index": 28
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 113,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 114,
                          "typeName": "Vec<<T as Config>::Call>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>",
                        "",
                        "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                        "event is deposited. If a call failed and the batch was interrupted, then the",
                        "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                        "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                        "event is deposited."
                      ]
                    },
                    {
                      "name": "as_derivative",
                      "fields": [
                        {
                          "name": "index",
                          "type": 107,
                          "typeName": "u16"
                        },
                        {
                          "name": "call",
                          "type": 112,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Send a call through an indexed pseudonym of the sender.",
                        "",
                        "Filter from origin are passed along. The call will be dispatched with an origin which",
                        "use the same filter as the origin of this call.",
                        "",
                        "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                        "because you expect `proxy` to have been used prior in the call stack and you do not want",
                        "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                        "in the Multisig pallet instead.",
                        "",
                        "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                        "",
                        "The dispatch origin for this call must be _Signed_."
                      ]
                    },
                    {
                      "name": "batch_all",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 114,
                          "typeName": "Vec<<T as Config>::Call>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Send a batch of dispatch calls and atomically execute them.",
                        "The whole transaction will rollback and fail if any of the calls failed.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 114,
            "type": {
              "def": {
                "sequence": {
                  "type": 112
                }
              }
            }
          },
          {
            "id": 115,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "schedule",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 116,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 112,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Anonymously schedule a task.",
                        "",
                        "# <weight>",
                        "- S = Number of already scheduled calls",
                        "- Base Weight: 22.29 + .126 * S µs",
                        "- DB Weight:",
                        "    - Read: Agenda",
                        "    - Write: Agenda",
                        "- Will use base weight of 25 which should be good for up to 30 scheduled calls",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "cancel",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Cancel an anonymously scheduled task.",
                        "",
                        "# <weight>",
                        "- S = Number of already scheduled calls",
                        "- Base Weight: 22.15 + 2.869 * S µs",
                        "- DB Weight:",
                        "    - Read: Agenda",
                        "    - Write: Agenda, Lookup",
                        "- Will use base weight of 100 which should be good for up to 30 scheduled calls",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "schedule_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 116,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 112,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Schedule a named task.",
                        "",
                        "# <weight>",
                        "- S = Number of already scheduled calls",
                        "- Base Weight: 29.6 + .159 * S µs",
                        "- DB Weight:",
                        "    - Read: Agenda, Lookup",
                        "    - Write: Agenda, Lookup",
                        "- Will use base weight of 35 which should be good for more than 30 scheduled calls",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "cancel_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel a named scheduled task.",
                        "",
                        "# <weight>",
                        "- S = Number of already scheduled calls",
                        "- Base Weight: 24.91 + 2.907 * S µs",
                        "- DB Weight:",
                        "    - Read: Agenda, Lookup",
                        "    - Write: Agenda, Lookup",
                        "- Will use base weight of 100 which should be good for up to 30 scheduled calls",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "schedule_after",
                      "fields": [
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 116,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 112,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Anonymously schedule a task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule`].",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "schedule_named_after",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 116,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 112,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Schedule a named task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule_named`](Self::schedule_named).",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 116,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 33
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 33
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 117,
            "type": {
              "path": [
                "orml_tokens",
                "module",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 36,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 118,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer` will set the `FreeBalance` of the sender and receiver.",
                        "It will decrease the total issuance of the system by the",
                        "`TransferFee`. If the sender's account is below the existential",
                        "deposit as a result of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `currency_id`: currency type.",
                        "- `amount`: free balance amount to tranfer."
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 36,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "keep_alive",
                          "type": 57,
                          "typeName": "bool"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Transfer all remaining balance to the given account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_",
                        "balances. This means that any locked, reserved, or existential",
                        "deposits (when `keep_alive` is `true`), will not be transferred by",
                        "this function. To ensure that this function results in a killed",
                        "account, you might need to prepare the account by removing any",
                        "reference counters, storage deposits, etc...",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `currency_id`: currency type.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all`",
                        "  operation should send all of the funds the account has, causing",
                        "  the sender account to be killed (false), or transfer everything",
                        "  except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true)."
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 36,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 118,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Same as the [`transfer`] call, but with a check that the transfer",
                        "will not kill the origin account.",
                        "",
                        "99% of the time you want [`transfer`] instead.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `currency_id`: currency type.",
                        "- `amount`: free balance amount to tranfer."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 36,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 118,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Exactly as `transfer`, except the origin must be root and the source",
                        "account may be specified.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "- `source`: The sender of the transfer.",
                        "- `dest`: The recipient of the transfer.",
                        "- `currency_id`: currency type.",
                        "- `amount`: free balance amount to tranfer."
                      ]
                    },
                    {
                      "name": "set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 36,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "new_free",
                          "type": 118,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "new_reserved",
                          "type": 118,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the balances of a given account.",
                        "",
                        "This will alter `FreeBalance` and `ReservedBalance` in storage. it",
                        "will also decrease the total issuance of the system",
                        "(`TotalIssuance`). If the new free or reserved balance is below the",
                        "existential deposit, it will reap the `AccountInfo`.",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 118,
            "type": {
              "def": {
                "compact": {
                  "type": 6
                }
              }
            }
          },
          {
            "id": 119,
            "type": {
              "path": [
                "reward",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {}
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 120,
            "type": {
              "path": [
                "btc_relay",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "verify_and_validate_transaction",
                      "fields": [
                        {
                          "name": "raw_merkle_proof",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "confirmations",
                          "type": 121,
                          "typeName": "Option<u32>"
                        },
                        {
                          "name": "raw_tx",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "expected_btc",
                          "type": 122,
                          "typeName": "Value"
                        },
                        {
                          "name": "recipient_btc_address",
                          "type": 53,
                          "typeName": "BtcAddress"
                        },
                        {
                          "name": "op_return_id",
                          "type": 123,
                          "typeName": "Option<H256>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Verifies the inclusion of `tx_id` into the relay, and validates the given raw Bitcoin transaction, according",
                        "to the supported transaction format (see <https://interlay.gitlab.io/polkabtc-spec/btcrelay-spec/intro/accepted-format.html>)",
                        "",
                        "# Arguments",
                        "",
                        "* `raw_merkle_proof` - The raw merkle proof as returned by bitcoin `gettxoutproof`",
                        "* `confirmations` - The number of confirmations needed to accept the proof. If `none`, the value stored in",
                        "  the StableBitcoinConfirmations storage item is used.",
                        "* `raw_tx` - raw Bitcoin transaction",
                        "* `expected_btc` - expected amount of BTC (satoshis) sent to the recipient",
                        "* `recipient_btc_address` - 20 byte Bitcoin address of recipient of the BTC in the 1st  / payment UTXO",
                        "* `op_return_id` - 32 byte hash identifier expected in OP_RETURN (replay protection)"
                      ]
                    },
                    {
                      "name": "verify_transaction_inclusion",
                      "fields": [
                        {
                          "name": "tx_id",
                          "type": 44,
                          "typeName": "H256Le"
                        },
                        {
                          "name": "raw_merkle_proof",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "confirmations",
                          "type": 121,
                          "typeName": "Option<u32>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Verifies the inclusion of `tx_id`",
                        "",
                        "# Arguments",
                        "",
                        "* `tx_id` - The hash of the transaction to check for",
                        "* `raw_merkle_proof` - The raw merkle proof as returned by bitcoin `gettxoutproof`",
                        "* `confirmations` - The number of confirmations needed to accept the proof. If `none`, the value stored in",
                        "  the `StableBitcoinConfirmations` storage item is used.",
                        "",
                        "# <weight>",
                        "Key: C (len of chains), P (len of positions)",
                        "- Storage Reads:",
                        "\t- One storage read to check if inclusion check is disabled. O(1)",
                        "\t- One storage read to retrieve best block height. O(1)",
                        "\t- One storage read to check if transaction is in active fork. O(1)",
                        "\t- One storage read to retrieve block header. O(1)",
                        "\t- One storage read to check that parachain is not shutdown. O(1)",
                        "\t- One storage read to check stable bitcoin confirmations. O(1)",
                        "\t- One storage read to check stable parachain confirmations. O(1)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "validate_transaction",
                      "fields": [
                        {
                          "name": "raw_tx",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "expected_btc",
                          "type": 122,
                          "typeName": "Value"
                        },
                        {
                          "name": "recipient_btc_address",
                          "type": 53,
                          "typeName": "BtcAddress"
                        },
                        {
                          "name": "op_return_id",
                          "type": 123,
                          "typeName": "Option<H256>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Validates a given raw Bitcoin transaction, according to the supported transaction",
                        "format (see <https://interlay.gitlab.io/polkabtc-spec/btcrelay-spec/intro/accepted-format.html>)",
                        "This DOES NOT check if the transaction is included in a block, nor does it guarantee that the",
                        "transaction is fully valid according to the consensus (needs full node).",
                        "",
                        "# Arguments",
                        "* `raw_tx` - raw Bitcoin transaction",
                        "* `expected_btc` - expected amount of BTC (satoshis) sent to the recipient",
                        "* `recipient_btc_address` - expected Bitcoin address of recipient (p2sh, p2pkh, p2wpkh)",
                        "* `op_return_id` - 32 byte hash identifier expected in OP_RETURN (replay protection)"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 121,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 4
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 122,
            "type": {
              "def": {
                "primitive": "i64"
              }
            }
          },
          {
            "id": 123,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 9
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 124,
            "type": {
              "path": [
                "security",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_parachain_status",
                      "fields": [
                        {
                          "name": "status_code",
                          "type": 46,
                          "typeName": "StatusCode"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the parachain status code.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - the dispatch origin of this call (must be _Root_)",
                        "* `status_code` - the status code to set",
                        "",
                        "# Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "insert_parachain_error",
                      "fields": [
                        {
                          "name": "error_code",
                          "type": 48,
                          "typeName": "ErrorCode"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Insert a new parachain error.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - the dispatch origin of this call (must be _Root_)",
                        "* `error_code` - the error code to insert",
                        "",
                        "# Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "remove_parachain_error",
                      "fields": [
                        {
                          "name": "error_code",
                          "type": 48,
                          "typeName": "ErrorCode"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Remove a parachain error.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - the dispatch origin of this call (must be _Root_)",
                        "* `error_code` - the error code to remove",
                        "",
                        "# Weight: `O(1)`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 125,
            "type": {
              "path": [
                "relay",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "initialize",
                      "fields": [
                        {
                          "name": "raw_block_header",
                          "type": 126,
                          "typeName": "RawBlockHeader"
                        },
                        {
                          "name": "block_height",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "One time function to initialize the BTC-Relay with the first block",
                        "",
                        "# Arguments",
                        "",
                        "* `block_header_bytes` - 80 byte raw Bitcoin block header.",
                        "* `block_height` - starting Bitcoin block height of the submitted block header.",
                        "",
                        "# <weight>",
                        "- Storage Reads:",
                        "\t- One storage read to check that parachain is not shutdown. O(1)",
                        "\t- One storage read to check if relayer authorization is disabled. O(1)",
                        "\t- One storage read to check if relayer is authorized. O(1)",
                        "- Storage Writes:",
                        "    - One storage write to store block hash. O(1)",
                        "    - One storage write to store block header. O(1)",
                        "\t- One storage write to initialize main chain. O(1)",
                        "    - One storage write to store best block hash. O(1)",
                        "    - One storage write to store best block height. O(1)",
                        "- Events:",
                        "\t- One event for initialization.",
                        "",
                        "Total Complexity: O(1)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "store_block_header",
                      "fields": [
                        {
                          "name": "raw_block_header",
                          "type": 126,
                          "typeName": "RawBlockHeader"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Stores a single new block header",
                        "",
                        "# Arguments",
                        "",
                        "* `raw_block_header` - 80 byte raw Bitcoin block header.",
                        "",
                        "# <weight>",
                        "Key: C (len of chains), P (len of positions)",
                        "- Storage Reads:",
                        "\t- One storage read to check that parachain is not shutdown. O(1)",
                        "\t- One storage read to check if relayer authorization is disabled. O(1)",
                        "\t- One storage read to check if relayer is authorized. O(1)",
                        "\t- One storage read to check if block header is stored. O(1)",
                        "\t- One storage read to retrieve parent block hash. O(1)",
                        "\t- One storage read to check if difficulty check is disabled. O(1)",
                        "\t- One storage read to retrieve last re-target. O(1)",
                        "\t- One storage read to retrieve all Chains. O(C)",
                        "- Storage Writes:",
                        "    - One storage write to store block hash. O(1)",
                        "    - One storage write to store block header. O(1)",
                        "\t- One storage mutate to extend main chain. O(1)",
                        "    - One storage write to store best block hash. O(1)",
                        "    - One storage write to store best block height. O(1)",
                        "- Notable Computation:",
                        "\t- O(P) sort to reorg chains.",
                        "- Events:",
                        "\t- One event for block stored (fork or extension).",
                        "",
                        "Total Complexity: O(C + P)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "report_vault_theft",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "raw_merkle_proof",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "raw_tx",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Report misbehavior by a Vault, providing a fraud proof (malicious Bitcoin transaction",
                        "and the corresponding transaction inclusion proof). This fully slashes the Vault.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin`: Any signed user.",
                        "* `vault_id`: The account of the vault to check.",
                        "* `raw_merkle_proof`: The proof of tx inclusion.",
                        "* `raw_tx`: The raw Bitcoin transaction."
                      ]
                    },
                    {
                      "name": "report_vault_double_payment",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "raw_merkle_proofs",
                          "type": 93,
                          "typeName": "(Vec<u8>, Vec<u8>)"
                        },
                        {
                          "name": "raw_txs",
                          "type": 93,
                          "typeName": "(Vec<u8>, Vec<u8>)"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Report Vault double payment, providing two fraud proofs (malicious Bitcoin transactions",
                        "and the corresponding transaction inclusion proofs). This fully slashes the Vault.",
                        "",
                        "This can be used for any multiple of payments, i.e., a vault making two, three, four, etc. payments",
                        "by proving just one double payment.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin`: Any signed user.",
                        "* `vault_id`: The account of the vault to check.",
                        "* `raw_merkle_proofs`: The proofs of tx inclusion.",
                        "* `raw_txs`: The raw Bitcoin transactions."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 126,
            "type": {
              "path": [
                "bitcoin",
                "types",
                "RawBlockHeader"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 127,
                      "typeName": "[u8; 80]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 127,
            "type": {
              "def": {
                "array": {
                  "len": 80,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 128,
            "type": {
              "path": [
                "vault_registry",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "register_vault",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 39,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "collateral",
                          "type": 118,
                          "typeName": "Collateral<T>"
                        },
                        {
                          "name": "public_key",
                          "type": 51,
                          "typeName": "BtcPublicKey"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Initiates the registration procedure for a new Vault.",
                        "The Vault provides its BTC address and locks up collateral,",
                        "which is to be used in the issuing process.",
                        "",
                        "# Arguments",
                        "* `collateral` - the amount of collateral to lock",
                        "* `public_key` - the BTC public key of the vault to register",
                        "",
                        "# Errors",
                        "* `InsufficientVaultCollateralAmount` - if the collateral is below the minimum threshold",
                        "* `VaultAlreadyRegistered` - if a vault is already registered for the origin account",
                        "* `InsufficientCollateralAvailable` - if the vault does not own enough collateral"
                      ]
                    },
                    {
                      "name": "deposit_collateral",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 39,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "amount",
                          "type": 118,
                          "typeName": "Collateral<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Deposit collateral as a security against stealing the",
                        "Bitcoin locked with the caller.",
                        "",
                        "# Arguments",
                        "* `amount` - the amount of extra collateral to lock"
                      ]
                    },
                    {
                      "name": "withdraw_collateral",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 39,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "amount",
                          "type": 118,
                          "typeName": "Collateral<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Withdraws `amount` of the collateral from the amount locked by",
                        "the vault corresponding to the origin account",
                        "The collateral left after withdrawal must be more",
                        "(free or used in collateral issued tokens) than MinimumCollateralVault",
                        "and above the SecureCollateralThreshold. Collateral that is currently",
                        "being used to back issued tokens remains locked until the Vault",
                        "is used for a redeem request (full release can take multiple redeem requests).",
                        "",
                        "# Arguments",
                        "* `amount` - the amount of collateral to withdraw",
                        "",
                        "# Errors",
                        "* `VaultNotFound` - if no vault exists for the origin account",
                        "* `InsufficientCollateralAvailable` - if the vault does not own enough collateral"
                      ]
                    },
                    {
                      "name": "update_public_key",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 39,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "public_key",
                          "type": 51,
                          "typeName": "BtcPublicKey"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Registers a new Bitcoin address for the vault.",
                        "",
                        "# Arguments",
                        "* `public_key` - the BTC public key of the vault to update"
                      ]
                    },
                    {
                      "name": "register_address",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 39,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "btc_address",
                          "type": 53,
                          "typeName": "BtcAddress"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "accept_new_issues",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 39,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "accept_new_issues",
                          "type": 57,
                          "typeName": "bool"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Configures whether or not the vault accepts new issues.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - sender of the transaction (i.e. the vault)",
                        "* `accept_new_issues` - true indicates that the vault accepts new issues",
                        "",
                        "# Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "report_undercollateralized_vault",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "set_system_collateral_ceiling",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 39,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "ceiling",
                          "type": 6,
                          "typeName": "Collateral<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Changes the collateral ceiling for a currency (only executable by the Root account)",
                        "",
                        "# Arguments",
                        "* `currency_id` - the currency pair to change",
                        "* `ceiling` - the new collateral ceiling"
                      ]
                    },
                    {
                      "name": "set_secure_collateral_threshold",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 39,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "threshold",
                          "type": 62,
                          "typeName": "UnsignedFixedPoint<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Changes the secure threshold for a currency (only executable by the Root account)",
                        "",
                        "# Arguments",
                        "* `currency_pair` - the currency pair to change",
                        "* `threshold` - the new secure threshold"
                      ]
                    },
                    {
                      "name": "set_premium_redeem_threshold",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 39,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "threshold",
                          "type": 62,
                          "typeName": "UnsignedFixedPoint<T>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Changes the collateral premium redeem threshold for a currency (only executable by the Root account)",
                        "",
                        "# Arguments",
                        "* `currency_pair` - the currency pair to change",
                        "* `ceiling` - the new collateral ceiling"
                      ]
                    },
                    {
                      "name": "set_liquidation_collateral_threshold",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 39,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "threshold",
                          "type": 62,
                          "typeName": "UnsignedFixedPoint<T>"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Changes the collateral liquidation threshold for a currency (only executable by the Root account)",
                        "",
                        "# Arguments",
                        "* `currency_pair` - the currency pair to change",
                        "* `ceiling` - the new collateral ceiling"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 129,
            "type": {
              "path": [
                "oracle",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "feed_values",
                      "fields": [
                        {
                          "name": "values",
                          "type": 59,
                          "typeName": "Vec<(OracleKey, T::UnsignedFixedPoint)>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Feeds data from the oracles, e.g., the exchange rates. This function",
                        "is intended to be API-compatible with orml-oracle.",
                        "",
                        "# Arguments",
                        "",
                        "* `values` - a vector of (key, value) pairs to submit"
                      ]
                    },
                    {
                      "name": "insert_authorized_oracle",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "name",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Adds an authorized oracle account (only executable by the Root account)",
                        "",
                        "# Arguments",
                        "* `account_id` - the account Id of the oracle",
                        "* `name` - a descriptive name for the oracle"
                      ]
                    },
                    {
                      "name": "remove_authorized_oracle",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Removes an authorized oracle account (only executable by the Root account)",
                        "",
                        "# Arguments",
                        "* `account_id` - the account Id of the oracle"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 130,
            "type": {
              "path": [
                "issue",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "request_issue",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 118,
                          "typeName": "Wrapped<T>"
                        },
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "griefing_collateral",
                          "type": 118,
                          "typeName": "Collateral<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Request the issuance of tokens",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - sender of the transaction",
                        "* `amount` - amount of BTC the user wants to convert to issued tokens. Note that the",
                        "amount of issued tokens received will be less, because a fee is subtracted.",
                        "* `vault` - address of the vault",
                        "* `griefing_collateral` - amount of collateral"
                      ]
                    },
                    {
                      "name": "execute_issue",
                      "fields": [
                        {
                          "name": "issue_id",
                          "type": 9,
                          "typeName": "H256"
                        },
                        {
                          "name": "merkle_proof",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "raw_tx",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Finalize the issuance of tokens",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - sender of the transaction",
                        "* `issue_id` - identifier of issue request as output from request_issue",
                        "* `tx_block_height` - block number of collateral chain",
                        "* `merkle_proof` - raw bytes",
                        "* `raw_tx` - raw bytes"
                      ]
                    },
                    {
                      "name": "cancel_issue",
                      "fields": [
                        {
                          "name": "issue_id",
                          "type": 9,
                          "typeName": "H256"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Cancel the issuance of tokens if expired",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - sender of the transaction",
                        "* `issue_id` - identifier of issue request as output from request_issue"
                      ]
                    },
                    {
                      "name": "set_issue_period",
                      "fields": [
                        {
                          "name": "period",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the default issue period for tx verification.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - the dispatch origin of this call (must be _Root_)",
                        "* `period` - default period for new requests",
                        "",
                        "# Weight: `O(1)`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 131,
            "type": {
              "path": [
                "redeem",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "request_redeem",
                      "fields": [
                        {
                          "name": "amount_wrapped",
                          "type": 118,
                          "typeName": "Wrapped<T>"
                        },
                        {
                          "name": "btc_address",
                          "type": 53,
                          "typeName": "BtcAddress"
                        },
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Initializes a request to burn issued tokens against a Vault with sufficient tokens. It will",
                        "also ensure that the Parachain status is RUNNING.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - sender of the transaction",
                        "* `amount` - amount of issued tokens",
                        "* `btc_address` - the address to receive BTC",
                        "* `vault_id` - address of the vault"
                      ]
                    },
                    {
                      "name": "liquidation_redeem",
                      "fields": [
                        {
                          "name": "currencies",
                          "type": 39,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "amount_wrapped",
                          "type": 118,
                          "typeName": "Wrapped<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "When a Vault is liquidated, its collateral is slashed up to 150% of the liquidated BTC value.",
                        "To re-establish the physical 1:1 peg, the bridge allows users to burn issued tokens in return for",
                        "collateral at a premium rate.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - sender of the transaction",
                        "* `collateral_currency` - currency to be received",
                        "* `wrapped_currency` - currency of the wrapped token to burn",
                        "* `amount_wrapped` - amount of issued tokens to burn"
                      ]
                    },
                    {
                      "name": "execute_redeem",
                      "fields": [
                        {
                          "name": "redeem_id",
                          "type": 9,
                          "typeName": "H256"
                        },
                        {
                          "name": "merkle_proof",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "raw_tx",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A Vault calls this function after receiving an RequestRedeem event with their public key.",
                        "Before calling the function, the Vault transfers the specific amount of BTC to the BTC address",
                        "given in the original redeem request. The Vault completes the redeem with this function.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - anyone executing this redeem request",
                        "* `redeem_id` - identifier of redeem request as output from request_redeem",
                        "* `tx_id` - transaction hash",
                        "* `tx_block_height` - block number of collateral chain",
                        "* `merkle_proof` - raw bytes",
                        "* `raw_tx` - raw bytes"
                      ]
                    },
                    {
                      "name": "cancel_redeem",
                      "fields": [
                        {
                          "name": "redeem_id",
                          "type": 9,
                          "typeName": "H256"
                        },
                        {
                          "name": "reimburse",
                          "type": 57,
                          "typeName": "bool"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "If a redeem request is not completed on time, the redeem request can be cancelled.",
                        "The user that initially requested the redeem process calls this function to obtain",
                        "the Vault’s collateral as compensation for not refunding the BTC back to their address.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - sender of the transaction",
                        "* `redeem_id` - identifier of redeem request as output from request_redeem",
                        "* `reimburse` - specifying if the user wishes to be reimbursed in collateral",
                        "and slash the Vault, or wishes to keep the tokens (and retry",
                        "Redeem with another Vault)"
                      ]
                    },
                    {
                      "name": "set_redeem_period",
                      "fields": [
                        {
                          "name": "period",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the default redeem period for tx verification.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - the dispatch origin of this call (must be _Root_)",
                        "* `period` - default period for new requests",
                        "",
                        "# Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "mint_tokens_for_reimbursed_redeem",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 39,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "redeem_id",
                          "type": 9,
                          "typeName": "H256"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Mint tokens for a redeem that was cancelled with reimburse=true. This is",
                        "only possible if at the time of the cancel_redeem, the vault did not have",
                        "sufficient collateral after being slashed to back the tokens that the user",
                        "used to hold.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - the dispatch origin of this call (must be _Root_)",
                        "* `redeem_id` - identifier of redeem request as output from request_redeem",
                        "",
                        "# Weight: `O(1)`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 132,
            "type": {
              "path": [
                "replace",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "request_replace",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 39,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "amount",
                          "type": 118,
                          "typeName": "Wrapped<T>"
                        },
                        {
                          "name": "griefing_collateral",
                          "type": 118,
                          "typeName": "Collateral<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Request the replacement of a new vault ownership",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - sender of the transaction",
                        "* `amount` - amount of issued tokens",
                        "* `griefing_collateral` - amount of collateral"
                      ]
                    },
                    {
                      "name": "withdraw_replace",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 39,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "amount",
                          "type": 118,
                          "typeName": "Wrapped<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Withdraw a request of vault replacement",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - sender of the transaction: the old vault"
                      ]
                    },
                    {
                      "name": "accept_replace",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 39,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "old_vault",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount_btc",
                          "type": 118,
                          "typeName": "Wrapped<T>"
                        },
                        {
                          "name": "collateral",
                          "type": 118,
                          "typeName": "Collateral<T>"
                        },
                        {
                          "name": "btc_address",
                          "type": 53,
                          "typeName": "BtcAddress"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Accept request of vault replacement",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - the initiator of the transaction: the new vault",
                        "* `old_vault` - id of the old vault that we are (possibly partially) replacing",
                        "* `collateral` - the collateral for replacement",
                        "* `btc_address` - the address that old-vault should transfer the btc to"
                      ]
                    },
                    {
                      "name": "execute_replace",
                      "fields": [
                        {
                          "name": "replace_id",
                          "type": 9,
                          "typeName": "H256"
                        },
                        {
                          "name": "merkle_proof",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "raw_tx",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Execute vault replacement",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - sender of the transaction: the new vault",
                        "* `replace_id` - the ID of the replacement request",
                        "* 'merkle_proof' - the merkle root of the block",
                        "* `raw_tx` - the transaction id in bytes"
                      ]
                    },
                    {
                      "name": "cancel_replace",
                      "fields": [
                        {
                          "name": "replace_id",
                          "type": 9,
                          "typeName": "H256"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Cancel vault replacement",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - sender of the transaction: the new vault",
                        "* `replace_id` - the ID of the replacement request"
                      ]
                    },
                    {
                      "name": "set_replace_period",
                      "fields": [
                        {
                          "name": "period",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set the default replace period for tx verification.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - the dispatch origin of this call (must be _Root_)",
                        "* `period` - default period for new requests",
                        "",
                        "# Weight: `O(1)`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 133,
            "type": {
              "path": [
                "fee",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "withdraw_rewards",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "index",
                          "type": 121,
                          "typeName": "Option<T::Index>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Withdraw all rewards from the `origin` account in the `vault_id` staking pool.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - signing account"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 134,
            "type": {
              "path": [
                "refund",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "execute_refund",
                      "fields": [
                        {
                          "name": "refund_id",
                          "type": 9,
                          "typeName": "H256"
                        },
                        {
                          "name": "merkle_proof",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "raw_tx",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "set_refund_transaction_size",
                      "fields": [
                        {
                          "name": "size",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 135,
            "type": {
              "path": [
                "nomination",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_nomination_enabled",
                      "fields": [
                        {
                          "name": "enabled",
                          "type": 57,
                          "typeName": "bool"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "opt_in_to_nomination",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 39,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Allow nomination for this vault"
                      ]
                    },
                    {
                      "name": "opt_out_of_nomination",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 39,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Disallow nomination for this vault"
                      ]
                    },
                    {
                      "name": "deposit_collateral",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Collateral<T>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "withdraw_collateral",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 38,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Collateral<T>"
                        },
                        {
                          "name": "index",
                          "type": 121,
                          "typeName": "Option<T::Index>"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 136,
            "type": {
              "path": [
                "pallet_democracy",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "value",
                          "type": 118,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Propose a sensitive action to be taken.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the sender must",
                        "have funds to cover the deposit.",
                        "",
                        "- `proposal_hash`: The hash of the proposal preimage.",
                        "- `value`: The amount of deposit (must be at least `MinimumDeposit`).",
                        "",
                        "Emits `Proposed`.",
                        "",
                        "Weight: `O(p)`"
                      ]
                    },
                    {
                      "name": "second",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 88,
                          "typeName": "PropIndex"
                        },
                        {
                          "name": "seconds_upper_bound",
                          "type": 88,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Signals agreement with a particular proposal.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the sender",
                        "must have funds to cover the deposit, equal to the original deposit.",
                        "",
                        "- `proposal`: The index of the proposal to second.",
                        "- `seconds_upper_bound`: an upper bound on the current number of seconds on this",
                        "  proposal. Extrinsic is weighted according to this value with no refund.",
                        "",
                        "Weight: `O(S)` where S is the number of seconds a proposal already has."
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 88,
                          "typeName": "ReferendumIndex"
                        },
                        {
                          "name": "vote",
                          "type": 137,
                          "typeName": "AccountVote<BalanceOf<T>>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
                        "otherwise it is a vote to keep the status quo.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `ref_index`: The index of the referendum to vote for.",
                        "- `vote`: The vote configuration.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter has voted on."
                      ]
                    },
                    {
                      "name": "emergency_cancel",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
                        "referendum.",
                        "",
                        "The dispatch origin of this call must be `CancellationOrigin`.",
                        "",
                        "-`ref_index`: The index of the referendum to cancel.",
                        "",
                        "Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "external_propose",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Schedule a referendum to be tabled once it is legal to schedule an external",
                        "referendum.",
                        "",
                        "The dispatch origin of this call must be `ExternalOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Weight: `O(V)` with V number of vetoers in the blacklist of proposal.",
                        "  Decoding vec of length V. Charged as maximum"
                      ]
                    },
                    {
                      "name": "external_propose_majority",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
                        "an external referendum.",
                        "",
                        "The dispatch of this call must be `ExternalMajorityOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                        "pre-scheduled `external_propose` call.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "external_propose_default",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
                        "schedule an external referendum.",
                        "",
                        "The dispatch of this call must be `ExternalDefaultOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                        "pre-scheduled `external_propose` call.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "fast_track",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "voting_period",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Schedule the currently externally-proposed majority-carries referendum to be tabled",
                        "immediately. If there is no externally-proposed referendum currently, or if there is one",
                        "but it is not a majority-carries referendum then it fails.",
                        "",
                        "The dispatch of this call must be `FastTrackOrigin`.",
                        "",
                        "- `proposal_hash`: The hash of the current external proposal.",
                        "- `voting_period`: The period that is allowed for voting on this proposal. Increased to",
                        "  `FastTrackVotingPeriod` if too low.",
                        "- `delay`: The number of block after voting has ended in approval and this should be",
                        "  enacted. This doesn't have a minimum amount.",
                        "",
                        "Emits `Started`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "veto_external",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Veto and blacklist the external proposal hash.",
                        "",
                        "The dispatch origin of this call must be `VetoOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",
                        "",
                        "Emits `Vetoed`.",
                        "",
                        "Weight: `O(V + log(V))` where V is number of `existing vetoers`"
                      ]
                    },
                    {
                      "name": "cancel_referendum",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 88,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Remove a referendum.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "- `ref_index`: The index of the referendum to cancel.",
                        "",
                        "# Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "cancel_queued",
                      "fields": [
                        {
                          "name": "which",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Cancel a proposal queued for enactment.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "- `which`: The index of the referendum to cancel.",
                        "",
                        "Weight: `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`."
                      ]
                    },
                    {
                      "name": "delegate",
                      "fields": [
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "conviction",
                          "type": 139,
                          "typeName": "Conviction"
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Delegate the voting power (with some given conviction) of the sending account.",
                        "",
                        "The balance delegated is locked for as long as it's delegated, and thereafter for the",
                        "time appropriate for the conviction's lock period.",
                        "",
                        "The dispatch origin of this call must be _Signed_, and the signing account must either:",
                        "  - be delegating already; or",
                        "  - have no voting activity (if there is, then it will need to be removed/consolidated",
                        "    through `reap_vote` or `unvote`).",
                        "",
                        "- `to`: The account whose voting the `target` account's voting power will follow.",
                        "- `conviction`: The conviction that will be attached to the delegated votes. When the",
                        "  account is undelegated, the funds will be locked for the corresponding period.",
                        "- `balance`: The amount of the account's balance to be used in delegating. This must not",
                        "  be more than the account's current balance.",
                        "",
                        "Emits `Delegated`.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                        "  voted on. Weight is charged as if maximum votes."
                      ]
                    },
                    {
                      "name": "undelegate",
                      "index": 12,
                      "docs": [
                        "Undelegate the voting power of the sending account.",
                        "",
                        "Tokens may be unlocked following once an amount of time consistent with the lock period",
                        "of the conviction with which the delegation was issued.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the signing account must be",
                        "currently delegating.",
                        "",
                        "Emits `Undelegated`.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                        "  voted on. Weight is charged as if maximum votes."
                      ]
                    },
                    {
                      "name": "clear_public_proposals",
                      "index": 13,
                      "docs": [
                        "Clears all public proposals.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "note_preimage",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Register the preimage for an upcoming proposal. This doesn't require the proposal to be",
                        "in the dispatch queue but does require a deposit, returned once enacted.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `encoded_proposal`: The preimage of a proposal.",
                        "",
                        "Emits `PreimageNoted`.",
                        "",
                        "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
                      ]
                    },
                    {
                      "name": "note_preimage_operational",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Same as `note_preimage` but origin is `OperationalPreimageOrigin`."
                      ]
                    },
                    {
                      "name": "note_imminent_preimage",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Register the preimage for an upcoming proposal. This requires the proposal to be",
                        "in the dispatch queue. No deposit is needed. When this call is successful, i.e.",
                        "the preimage has not been uploaded before and matches some imminent proposal,",
                        "no fee is paid.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `encoded_proposal`: The preimage of a proposal.",
                        "",
                        "Emits `PreimageNoted`.",
                        "",
                        "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
                      ]
                    },
                    {
                      "name": "note_imminent_preimage_operational",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`."
                      ]
                    },
                    {
                      "name": "reap_preimage",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "proposal_len_upper_bound",
                          "type": 88,
                          "typeName": "u32"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Remove an expired proposal preimage and collect the deposit.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `proposal_hash`: The preimage hash of a proposal.",
                        "- `proposal_length_upper_bound`: an upper bound on length of the proposal. Extrinsic is",
                        "  weighted according to this value with no refund.",
                        "",
                        "This will only work after `VotingPeriod` blocks from the time that the preimage was",
                        "noted, if it's the same account doing it. If it's a different account, then it'll only",
                        "work an additional `EnactmentPeriod` later.",
                        "",
                        "Emits `PreimageReaped`.",
                        "",
                        "Weight: `O(D)` where D is length of proposal."
                      ]
                    },
                    {
                      "name": "unlock",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Unlock tokens that have an expired lock.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `target`: The account to remove the lock on.",
                        "",
                        "Weight: `O(R)` with R number of vote of target."
                      ]
                    },
                    {
                      "name": "remove_vote",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Remove a vote for a referendum.",
                        "",
                        "If:",
                        "- the referendum was cancelled, or",
                        "- the referendum is ongoing, or",
                        "- the referendum has ended such that",
                        "  - the vote of the account was in opposition to the result; or",
                        "  - there was no conviction to the account's vote; or",
                        "  - the account made a split vote",
                        "...then the vote is removed cleanly and a following call to `unlock` may result in more",
                        "funds being available.",
                        "",
                        "If, however, the referendum has ended and:",
                        "- it finished corresponding to the vote of the account, and",
                        "- the account made a standard vote with conviction, and",
                        "- the lock period of the conviction is not over",
                        "...then the lock will be aggregated into the overall account's lock, which may involve",
                        "*overlocking* (where the two locks are combined into a single lock that is the maximum",
                        "of both the amount locked and the time is it locked for).",
                        "",
                        "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                        "registered for referendum `index`.",
                        "",
                        "- `index`: The index of referendum of the vote to be removed.",
                        "",
                        "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                        "  Weight is calculated for the maximum number of vote."
                      ]
                    },
                    {
                      "name": "remove_other_vote",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Remove a vote for a referendum.",
                        "",
                        "If the `target` is equal to the signer, then this function is exactly equivalent to",
                        "`remove_vote`. If not equal to the signer, then the vote must have expired,",
                        "either because the referendum was cancelled, because the voter lost the referendum or",
                        "because the conviction period is over.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `target`: The account of the vote to be removed; this account must have voted for",
                        "  referendum `index`.",
                        "- `index`: The index of referendum of the vote to be removed.",
                        "",
                        "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                        "  Weight is calculated for the maximum number of vote."
                      ]
                    },
                    {
                      "name": "enact_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Enact a proposal from a referendum. For now we just make the weight be the maximum."
                      ]
                    },
                    {
                      "name": "blacklist",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "maybe_ref_index",
                          "type": 121,
                          "typeName": "Option<ReferendumIndex>"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Permanently place a proposal into the blacklist. This prevents it from ever being",
                        "proposed again.",
                        "",
                        "If called on a queued public or external proposal, then this will result in it being",
                        "removed. If the `ref_index` supplied is an active referendum with the proposal hash,",
                        "then it will be cancelled.",
                        "",
                        "The dispatch origin of this call must be `BlacklistOrigin`.",
                        "",
                        "- `proposal_hash`: The proposal hash to blacklist permanently.",
                        "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be",
                        "cancelled.",
                        "",
                        "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a",
                        "  reasonable value)."
                      ]
                    },
                    {
                      "name": "cancel_proposal",
                      "fields": [
                        {
                          "name": "prop_index",
                          "type": 88,
                          "typeName": "PropIndex"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Remove a proposal.",
                        "",
                        "The dispatch origin of this call must be `CancelProposalOrigin`.",
                        "",
                        "- `prop_index`: The index of the proposal to cancel.",
                        "",
                        "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 137,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "AccountVote"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Standard",
                      "fields": [
                        {
                          "name": "vote",
                          "type": 138,
                          "typeName": "Vote"
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Split",
                      "fields": [
                        {
                          "name": "aye",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "nay",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 138,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "Vote"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 139,
            "type": {
              "path": [
                "pallet_democracy",
                "conviction",
                "Conviction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Locked1x",
                      "index": 1
                    },
                    {
                      "name": "Locked2x",
                      "index": 2
                    },
                    {
                      "name": "Locked3x",
                      "index": 3
                    },
                    {
                      "name": "Locked4x",
                      "index": 4
                    },
                    {
                      "name": "Locked5x",
                      "index": 5
                    },
                    {
                      "name": "Locked6x",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 140,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_members",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 70,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "prime",
                          "type": 141,
                          "typeName": "Option<T::AccountId>"
                        },
                        {
                          "name": "old_count",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the collective's membership.",
                        "",
                        "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                        "- `prime`: The prime member whose vote sets the default.",
                        "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                        "  weight estimation.",
                        "",
                        "Requires root origin.",
                        "",
                        "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                        "      the weight estimations rely on it to estimate dispatchable weight.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(MP + N)` where:",
                        "  - `M` old-members-count (code- and governance-bounded)",
                        "  - `N` new-members-count (code- and governance-bounded)",
                        "  - `P` proposals-count (code-bounded)",
                        "- DB:",
                        "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                        "    members",
                        "  - 1 storage read (codec `O(P)`) for reading the proposals",
                        "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                        "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 112,
                          "typeName": "Box<<T as Config<I>>::Proposal>"
                        },
                        {
                          "name": "length_bound",
                          "type": 88,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatch a proposal from a member using the `Member` origin.",
                        "",
                        "Origin must be a member of the collective.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                        "  `proposal`",
                        "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 88,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "proposal",
                          "type": 112,
                          "typeName": "Box<<T as Config<I>>::Proposal>"
                        },
                        {
                          "name": "length_bound",
                          "type": 88,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add a new proposal to either be voted on or executed directly.",
                        "",
                        "Requires the sender to be member.",
                        "",
                        "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                        "or put up for voting.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - branching is influenced by `threshold` where:",
                        "    - `P1` is proposal execution complexity (`threshold < 2`)",
                        "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                        "- DB:",
                        "  - 1 storage read `is_member` (codec `O(M)`)",
                        "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                        "  - DB accesses influenced by `threshold`:",
                        "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                        "    - OR proposal insertion (`threshold <= 2`)",
                        "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                        "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                        "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                        "      - 1 storage write `Voting` (codec `O(M)`)",
                        "  - 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "index",
                          "type": 88,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "approve",
                          "type": 57,
                          "typeName": "bool"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "Requires the sender to be a member.",
                        "",
                        "Transaction fees will be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "# <weight>",
                        "## Weight",
                        "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                        "- DB:",
                        "  - 1 storage read `Members` (codec `O(M)`)",
                        "  - 1 storage mutation `Voting` (codec `O(M)`)",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "index",
                          "type": 88,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 110,
                          "typeName": "Weight"
                        },
                        {
                          "name": "length_bound",
                          "type": 88,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)",
                        "- DB:",
                        " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                        " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                        "   `O(P2)`)",
                        " - any mutations done while executing `proposal` (`P1`)",
                        "- up to 3 events",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "disapprove_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                        "state.",
                        "",
                        "Must be called by the Root origin.",
                        "",
                        "Parameters:",
                        "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                        "",
                        "# <weight>",
                        "Complexity: O(P) where P is the number of max proposals",
                        "DB Weight:",
                        "* Reads: Proposals",
                        "* Writes: Voting, Proposals, ProposalOf",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 141,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 0
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 142,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_members",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 70,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "prime",
                          "type": 141,
                          "typeName": "Option<T::AccountId>"
                        },
                        {
                          "name": "old_count",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the collective's membership.",
                        "",
                        "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                        "- `prime`: The prime member whose vote sets the default.",
                        "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                        "  weight estimation.",
                        "",
                        "Requires root origin.",
                        "",
                        "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                        "      the weight estimations rely on it to estimate dispatchable weight.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(MP + N)` where:",
                        "  - `M` old-members-count (code- and governance-bounded)",
                        "  - `N` new-members-count (code- and governance-bounded)",
                        "  - `P` proposals-count (code-bounded)",
                        "- DB:",
                        "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                        "    members",
                        "  - 1 storage read (codec `O(P)`) for reading the proposals",
                        "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                        "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 112,
                          "typeName": "Box<<T as Config<I>>::Proposal>"
                        },
                        {
                          "name": "length_bound",
                          "type": 88,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatch a proposal from a member using the `Member` origin.",
                        "",
                        "Origin must be a member of the collective.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                        "  `proposal`",
                        "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 88,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "proposal",
                          "type": 112,
                          "typeName": "Box<<T as Config<I>>::Proposal>"
                        },
                        {
                          "name": "length_bound",
                          "type": 88,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add a new proposal to either be voted on or executed directly.",
                        "",
                        "Requires the sender to be member.",
                        "",
                        "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                        "or put up for voting.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - branching is influenced by `threshold` where:",
                        "    - `P1` is proposal execution complexity (`threshold < 2`)",
                        "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                        "- DB:",
                        "  - 1 storage read `is_member` (codec `O(M)`)",
                        "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                        "  - DB accesses influenced by `threshold`:",
                        "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                        "    - OR proposal insertion (`threshold <= 2`)",
                        "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                        "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                        "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                        "      - 1 storage write `Voting` (codec `O(M)`)",
                        "  - 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "index",
                          "type": 88,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "approve",
                          "type": 57,
                          "typeName": "bool"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "Requires the sender to be a member.",
                        "",
                        "Transaction fees will be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "# <weight>",
                        "## Weight",
                        "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                        "- DB:",
                        "  - 1 storage read `Members` (codec `O(M)`)",
                        "  - 1 storage mutation `Voting` (codec `O(M)`)",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "index",
                          "type": 88,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 110,
                          "typeName": "Weight"
                        },
                        {
                          "name": "length_bound",
                          "type": 88,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)",
                        "- DB:",
                        " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                        " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                        "   `O(P2)`)",
                        " - any mutations done while executing `proposal` (`P1`)",
                        "- up to 3 events",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "disapprove_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                        "state.",
                        "",
                        "Must be called by the Root origin.",
                        "",
                        "Parameters:",
                        "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                        "",
                        "# <weight>",
                        "Complexity: O(P) where P is the number of max proposals",
                        "DB Weight:",
                        "* Reads: Proposals",
                        "* Writes: Voting, Proposals, ProposalOf",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 143,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a member `who` to the set.",
                        "",
                        "May only be called from `T::AddOrigin`."
                      ]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Remove a member `who` from the set.",
                        "",
                        "May only be called from `T::RemoveOrigin`."
                      ]
                    },
                    {
                      "name": "swap_member",
                      "fields": [
                        {
                          "name": "remove",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "add",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Swap out one member `remove` for another `add`.",
                        "",
                        "May only be called from `T::SwapOrigin`.",
                        "",
                        "Prime membership is *not* passed from `remove` to `add`, if extant."
                      ]
                    },
                    {
                      "name": "reset_members",
                      "fields": [
                        {
                          "name": "members",
                          "type": 70,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Change the membership to a new set, disregarding the existing membership. Be nice and",
                        "pass `members` pre-sorted.",
                        "",
                        "May only be called from `T::ResetOrigin`."
                      ]
                    },
                    {
                      "name": "change_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Swap out the sending member for some other key `new`.",
                        "",
                        "May only be called from `Signed` origin of a current member.",
                        "",
                        "Prime membership is passed from the origin account to `new`, if extant."
                      ]
                    },
                    {
                      "name": "set_prime",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set the prime member. Must be a current member.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    },
                    {
                      "name": "clear_prime",
                      "index": 6,
                      "docs": [
                        "Remove the prime member if it exists.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 144,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose_spend",
                      "fields": [
                        {
                          "name": "value",
                          "type": 118,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Put forward a suggestion for spending. A deposit proportional to the value",
                        "is reserved and slashed if the proposal is rejected. It is returned once the",
                        "proposal is awarded.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1)",
                        "- DbReads: `ProposalCount`, `origin account`",
                        "- DbWrites: `ProposalCount`, `Proposals`, `origin account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reject_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 88,
                          "typeName": "ProposalIndex"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Reject a proposed spend. The original deposit will be slashed.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1)",
                        "- DbReads: `Proposals`, `rejected proposer account`",
                        "- DbWrites: `Proposals`, `rejected proposer account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "approve_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 88,
                          "typeName": "ProposalIndex"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                        "and the original deposit will be returned.",
                        "",
                        "May only be called from `T::ApproveOrigin`.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1).",
                        "- DbReads: `Proposals`, `Approvals`",
                        "- DbWrite: `Approvals`",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 145,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "votes",
                          "type": 70,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "value",
                          "type": 118,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Vote for a set of candidates for the upcoming round of election. This can be called to",
                        "set the initial votes, or update already existing votes.",
                        "",
                        "Upon initial voting, `value` units of `who`'s balance is locked and a deposit amount is",
                        "reserved. The deposit is based on the number of votes and can be updated over time.",
                        "",
                        "The `votes` should:",
                        "  - not be empty.",
                        "  - be less than the number of possible candidates. Note that all current members and",
                        "    runners-up are also automatically candidates for the next round.",
                        "",
                        "If `value` is more than `who`'s total balance, then the maximum of the two is used.",
                        "",
                        "The dispatch origin of this call must be signed.",
                        "",
                        "### Warning",
                        "",
                        "It is the responsibility of the caller to **NOT** place all of their balance into the",
                        "lock and keep some for further operations.",
                        "",
                        "# <weight>",
                        "We assume the maximum weight among all 3 cases: vote_equal, vote_more and vote_less.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_voter",
                      "index": 1,
                      "docs": [
                        "Remove `origin` as a voter.",
                        "",
                        "This removes the lock and returns the deposit.",
                        "",
                        "The dispatch origin of this call must be signed and be a voter."
                      ]
                    },
                    {
                      "name": "submit_candidacy",
                      "fields": [
                        {
                          "name": "candidate_count",
                          "type": 88,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Submit oneself for candidacy. A fixed amount of deposit is recorded.",
                        "",
                        "All candidates are wiped at the end of the term. They either become a member/runner-up,",
                        "or leave the system while their deposit is slashed.",
                        "",
                        "The dispatch origin of this call must be signed.",
                        "",
                        "### Warning",
                        "",
                        "Even if a candidate ends up being a member, they must call [`Call::renounce_candidacy`]",
                        "to get their deposit back. Losing the spot in an election will always lead to a slash.",
                        "",
                        "# <weight>",
                        "The number of current candidates must be provided as witness data.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "renounce_candidacy",
                      "fields": [
                        {
                          "name": "renouncing",
                          "type": 146,
                          "typeName": "Renouncing"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Renounce one's intention to be a candidate for the next election round. 3 potential",
                        "outcomes exist:",
                        "",
                        "- `origin` is a candidate and not elected in any set. In this case, the deposit is",
                        "  unreserved, returned and origin is removed as a candidate.",
                        "- `origin` is a current runner-up. In this case, the deposit is unreserved, returned and",
                        "  origin is removed as a runner-up.",
                        "- `origin` is a current member. In this case, the deposit is unreserved and origin is",
                        "  removed as a member, consequently not being a candidate for the next round anymore.",
                        "  Similar to [`remove_member`](Self::remove_member), if replacement runners exists, they",
                        "  are immediately used. If the prime is renouncing, then no prime will exist until the",
                        "  next round.",
                        "",
                        "The dispatch origin of this call must be signed, and have one of the above roles.",
                        "",
                        "# <weight>",
                        "The type of renouncing must be provided as witness data.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "has_replacement",
                          "type": 57,
                          "typeName": "bool"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Remove a particular member from the set. This is effective immediately and the bond of",
                        "the outgoing member is slashed.",
                        "",
                        "If a runner-up is available, then the best runner-up will be removed and replaces the",
                        "outgoing member. Otherwise, a new phragmen election is started.",
                        "",
                        "The dispatch origin of this call must be root.",
                        "",
                        "Note that this does not affect the designated block number of the next election.",
                        "",
                        "# <weight>",
                        "If we have a replacement, we use a small weight. Else, since this is a root call and",
                        "will go into phragmen, we assume full block for now.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "clean_defunct_voters",
                      "fields": [
                        {
                          "name": "num_voters",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "num_defunct",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Clean all voters who are defunct (i.e. they do not serve any purpose at all). The",
                        "deposit of the removed voters are returned.",
                        "",
                        "This is an root function to be used only for cleaning the state.",
                        "",
                        "The dispatch origin of this call must be root.",
                        "",
                        "# <weight>",
                        "The total number of voters and those that are defunct must be provided as witness data.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 146,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "Renouncing"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Member",
                      "index": 0
                    },
                    {
                      "name": "RunnerUp",
                      "index": 1
                    },
                    {
                      "name": "Candidate",
                      "fields": [
                        {
                          "type": 88,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 147,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "report_equivocation",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 148,
                          "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>"
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 159,
                          "typeName": "T::KeyOwnerProof"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Report voter equivocation/misbehavior. This method will verify the",
                        "equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence",
                        "will be reported."
                      ]
                    },
                    {
                      "name": "report_equivocation_unsigned",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 148,
                          "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>"
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 159,
                          "typeName": "T::KeyOwnerProof"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Report voter equivocation/misbehavior. This method will verify the",
                        "equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence",
                        "will be reported.",
                        "",
                        "This extrinsic must be called unsigned and it is expected that only",
                        "block authors will call it (validated in `ValidateUnsigned`), as such",
                        "if the block author is defined it will be defined as the equivocation",
                        "reporter."
                      ]
                    },
                    {
                      "name": "note_stalled",
                      "fields": [
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "best_finalized_block_number",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Note that the current authority set of the GRANDPA finality gadget has",
                        "stalled. This will trigger a forced authority set change at the beginning",
                        "of the next session, to be enacted `delay` blocks after that. The delay",
                        "should be high enough to safely assume that the block signalling the",
                        "forced change will not be re-orged (e.g. 1000 blocks). The GRANDPA voters",
                        "will start the new authority set using the given finalized block as base.",
                        "Only callable by root."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 148,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "EquivocationProof"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "set_id",
                      "type": 8,
                      "typeName": "SetId"
                    },
                    {
                      "name": "equivocation",
                      "type": 149,
                      "typeName": "Equivocation<H, N>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 149,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Prevote",
                      "fields": [
                        {
                          "type": 150,
                          "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Prevote<H, N>,\nAuthoritySignature>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Precommit",
                      "fields": [
                        {
                          "type": 156,
                          "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Precommit<H, N>,\nAuthoritySignature>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 150,
            "type": {
              "path": [
                "finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 82
                },
                {
                  "name": "V",
                  "type": 151
                },
                {
                  "name": "S",
                  "type": 152
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "round_number",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "identity",
                      "type": 82,
                      "typeName": "Id"
                    },
                    {
                      "name": "first",
                      "type": 155,
                      "typeName": "(V, S)"
                    },
                    {
                      "name": "second",
                      "type": 155,
                      "typeName": "(V, S)"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 151,
            "type": {
              "path": [
                "finality_grandpa",
                "Prevote"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "target_hash",
                      "type": 9,
                      "typeName": "H"
                    },
                    {
                      "name": "target_number",
                      "type": 4,
                      "typeName": "N"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 152,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "app",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 153,
                      "typeName": "ed25519::Signature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 153,
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 154,
                      "typeName": "[u8; 64]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 154,
            "type": {
              "def": {
                "array": {
                  "len": 64,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 155,
            "type": {
              "def": {
                "tuple": [
                  151,
                  152
                ]
              }
            }
          },
          {
            "id": 156,
            "type": {
              "path": [
                "finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 82
                },
                {
                  "name": "V",
                  "type": 157
                },
                {
                  "name": "S",
                  "type": 152
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "round_number",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "identity",
                      "type": 82,
                      "typeName": "Id"
                    },
                    {
                      "name": "first",
                      "type": 158,
                      "typeName": "(V, S)"
                    },
                    {
                      "name": "second",
                      "type": 158,
                      "typeName": "(V, S)"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 157,
            "type": {
              "path": [
                "finality_grandpa",
                "Precommit"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "target_hash",
                      "type": 9,
                      "typeName": "H"
                    },
                    {
                      "name": "target_number",
                      "type": 4,
                      "typeName": "N"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 158,
            "type": {
              "def": {
                "tuple": [
                  157,
                  152
                ]
              }
            }
          },
          {
            "id": 159,
            "type": {
              "path": [
                "sp_core",
                "Void"
              ],
              "def": {
                "variant": {}
              }
            }
          },
          {
            "id": 160,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RequireSudo",
                      "index": 0,
                      "docs": [
                        "Sender must be the Sudo account"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the Sudo pallet"
              ]
            }
          },
          {
            "id": 161,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyCalls",
                      "index": 0,
                      "docs": [
                        "Too many calls batched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 162,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1Ancient",
                      "index": 0
                    },
                    {
                      "name": "V2",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 163,
            "type": {
              "def": {
                "sequence": {
                  "type": 164
                }
              }
            }
          },
          {
            "id": 164,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "WeightToFeeCoefficient"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "coeff_integer",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "coeff_frac",
                      "type": 91,
                      "typeName": "Perbill"
                    },
                    {
                      "name": "negative",
                      "type": 57,
                      "typeName": "bool"
                    },
                    {
                      "name": "degree",
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 165,
            "type": {
              "def": {
                "sequence": {
                  "type": 166
                }
              }
            }
          },
          {
            "id": 166,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 167
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 167
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 167,
            "type": {
              "path": [
                "pallet_scheduler",
                "ScheduledV2"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": 112
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "PalletsOrigin",
                  "type": 168
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "maybe_id",
                      "type": 34,
                      "typeName": "Option<Vec<u8>>"
                    },
                    {
                      "name": "priority",
                      "type": 2,
                      "typeName": "schedule::Priority"
                    },
                    {
                      "name": "call",
                      "type": 112,
                      "typeName": "Call"
                    },
                    {
                      "name": "maybe_periodic",
                      "type": 116,
                      "typeName": "Option<schedule::Period<BlockNumber>>"
                    },
                    {
                      "name": "origin",
                      "type": 168,
                      "typeName": "PalletsOrigin"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 168,
            "type": {
              "path": [
                "interbtc_runtime_standalone",
                "OriginCaller"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "system",
                      "fields": [
                        {
                          "type": 169,
                          "typeName": "frame_system::Origin<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "type": 170,
                          "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "TechnicalCommittee",
                      "fields": [
                        {
                          "type": 171,
                          "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance2>"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Void",
                      "fields": [
                        {
                          "type": 159,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 169,
            "type": {
              "path": [
                "frame_system",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Root",
                      "index": 0
                    },
                    {
                      "name": "Signed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "None",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 170,
            "type": {
              "path": [
                "pallet_collective",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Member",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "_Phantom",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 171,
            "type": {
              "path": [
                "pallet_collective",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Member",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "_Phantom",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 172,
            "type": {
              "path": [
                "pallet_scheduler",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1",
                      "index": 0
                    },
                    {
                      "name": "V2",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 173,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FailedToSchedule",
                      "index": 0,
                      "docs": [
                        "Failed to schedule a call"
                      ]
                    },
                    {
                      "name": "NotFound",
                      "index": 1,
                      "docs": [
                        "Cannot find the scheduled call."
                      ]
                    },
                    {
                      "name": "TargetBlockNumberInPast",
                      "index": 2,
                      "docs": [
                        "Given target block number is in the past."
                      ]
                    },
                    {
                      "name": "RescheduleNoChange",
                      "index": 3,
                      "docs": [
                        "Reschedule failed because it does not change scheduled time."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 174,
            "type": {
              "path": [
                "currency",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ArithmeticOverflow",
                      "index": 0
                    },
                    {
                      "name": "ArithmeticUnderflow",
                      "index": 1
                    },
                    {
                      "name": "TryIntoIntError",
                      "index": 2
                    },
                    {
                      "name": "InvalidCurrency",
                      "index": 3
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 175,
            "type": {
              "def": {
                "tuple": [
                  0,
                  36
                ]
              }
            }
          },
          {
            "id": 176,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 177
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 178,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 177,
            "type": {
              "path": [
                "orml_tokens",
                "BalanceLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 106,
                      "typeName": "LockIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 178,
            "type": {
              "def": {
                "sequence": {
                  "type": 177
                }
              }
            }
          },
          {
            "id": 179,
            "type": {
              "path": [
                "orml_tokens",
                "AccountData"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "frozen",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 180,
            "type": {
              "path": [
                "orml_tokens",
                "module",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceTooLow",
                      "index": 0,
                      "docs": [
                        "The balance is too low"
                      ]
                    },
                    {
                      "name": "AmountIntoBalanceFailed",
                      "index": 1,
                      "docs": [
                        "Cannot convert Amount into Balance type"
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "index": 2,
                      "docs": [
                        "Failed because liquidity restrictions due to locking"
                      ]
                    },
                    {
                      "name": "MaxLocksExceeded",
                      "index": 3,
                      "docs": [
                        "Failed because the maximum locks was exceeded"
                      ]
                    },
                    {
                      "name": "KeepAlive",
                      "index": 4,
                      "docs": [
                        "Transfer/payment would kill account"
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "index": 5,
                      "docs": [
                        "Value too low to create account due to existential deposit"
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "index": 6,
                      "docs": [
                        "Beneficiary account must pre-exist"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 181,
            "type": {
              "def": {
                "tuple": [
                  36,
                  38
                ]
              }
            }
          },
          {
            "id": 182,
            "type": {
              "path": [
                "reward",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ArithmeticOverflow",
                      "index": 0
                    },
                    {
                      "name": "ArithmeticUnderflow",
                      "index": 1
                    },
                    {
                      "name": "TryIntoIntError",
                      "index": 2
                    },
                    {
                      "name": "InsufficientFunds",
                      "index": 3
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 183,
            "type": {
              "def": {
                "tuple": [
                  4,
                  38
                ]
              }
            }
          },
          {
            "id": 184,
            "type": {
              "def": {
                "tuple": [
                  36,
                  183
                ]
              }
            }
          },
          {
            "id": 185,
            "type": {
              "def": {
                "tuple": [
                  4,
                  186
                ]
              }
            }
          },
          {
            "id": 186,
            "type": {
              "def": {
                "tuple": [
                  38,
                  0
                ]
              }
            }
          },
          {
            "id": 187,
            "type": {
              "def": {
                "tuple": [
                  36,
                  188
                ]
              }
            }
          },
          {
            "id": 188,
            "type": {
              "def": {
                "tuple": [
                  4,
                  38,
                  0
                ]
              }
            }
          },
          {
            "id": 189,
            "type": {
              "path": [
                "staking",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ArithmeticOverflow",
                      "index": 0
                    },
                    {
                      "name": "ArithmeticUnderflow",
                      "index": 1
                    },
                    {
                      "name": "TryIntoIntError",
                      "index": 2
                    },
                    {
                      "name": "InsufficientFunds",
                      "index": 3
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 190,
            "type": {
              "path": [
                "btc_relay",
                "types",
                "RichBlockHeader"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "block_header",
                      "type": 191,
                      "typeName": "BlockHeader"
                    },
                    {
                      "name": "block_height",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "chain_id",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "para_height",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 191,
            "type": {
              "path": [
                "bitcoin",
                "types",
                "BlockHeader"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "merkle_root",
                      "type": 44,
                      "typeName": "H256Le"
                    },
                    {
                      "name": "target",
                      "type": 192,
                      "typeName": "U256"
                    },
                    {
                      "name": "timestamp",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "version",
                      "type": 194,
                      "typeName": "i32"
                    },
                    {
                      "name": "hash",
                      "type": 44,
                      "typeName": "H256Le"
                    },
                    {
                      "name": "hash_prev_block",
                      "type": 44,
                      "typeName": "H256Le"
                    },
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 192,
            "type": {
              "path": [
                "primitive_types",
                "U256"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 193,
                      "typeName": "[u64; 4]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 193,
            "type": {
              "def": {
                "array": {
                  "len": 4,
                  "type": 8
                }
              }
            }
          },
          {
            "id": 194,
            "type": {
              "def": {
                "primitive": "i32"
              }
            }
          },
          {
            "id": 195,
            "type": {
              "path": [
                "bitcoin",
                "types",
                "BlockChain"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "start_height",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_height",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 196,
            "type": {
              "path": [
                "btc_relay",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyInitialized",
                      "index": 0,
                      "docs": [
                        "Already initialized"
                      ]
                    },
                    {
                      "name": "InvalidStartHeight",
                      "index": 1,
                      "docs": [
                        "Start height must be start of difficulty period"
                      ]
                    },
                    {
                      "name": "MissingBlockHeight",
                      "index": 2,
                      "docs": [
                        "Missing the block at this height"
                      ]
                    },
                    {
                      "name": "InvalidHeaderSize",
                      "index": 3,
                      "docs": [
                        "Invalid block header size"
                      ]
                    },
                    {
                      "name": "DuplicateBlock",
                      "index": 4,
                      "docs": [
                        "Block already stored"
                      ]
                    },
                    {
                      "name": "OutdatedBlock",
                      "index": 5,
                      "docs": [
                        "Block already stored and is not head"
                      ]
                    },
                    {
                      "name": "PrevBlock",
                      "index": 6,
                      "docs": [
                        "Previous block hash not found"
                      ]
                    },
                    {
                      "name": "InvalidChainID",
                      "index": 7,
                      "docs": [
                        "Invalid chain ID"
                      ]
                    },
                    {
                      "name": "LowDiff",
                      "index": 8,
                      "docs": [
                        "PoW hash does not meet difficulty target of header"
                      ]
                    },
                    {
                      "name": "DiffTargetHeader",
                      "index": 9,
                      "docs": [
                        "Incorrect difficulty target specified in block header"
                      ]
                    },
                    {
                      "name": "MalformedTxid",
                      "index": 10,
                      "docs": [
                        "Malformed transaction identifier"
                      ]
                    },
                    {
                      "name": "BitcoinConfirmations",
                      "index": 11,
                      "docs": [
                        "Transaction has less confirmations of Bitcoin blocks than required"
                      ]
                    },
                    {
                      "name": "ParachainConfirmations",
                      "index": 12,
                      "docs": [
                        "Transaction has less confirmations of Parachain blocks than required"
                      ]
                    },
                    {
                      "name": "OngoingFork",
                      "index": 13,
                      "docs": [
                        "Current fork ongoing"
                      ]
                    },
                    {
                      "name": "MalformedMerkleProof",
                      "index": 14,
                      "docs": [
                        "Merkle proof is malformed"
                      ]
                    },
                    {
                      "name": "InvalidMerkleProof",
                      "index": 15,
                      "docs": [
                        "Invalid merkle proof"
                      ]
                    },
                    {
                      "name": "Shutdown",
                      "index": 16,
                      "docs": [
                        "BTC Parachain has shut down"
                      ]
                    },
                    {
                      "name": "InvalidTxid",
                      "index": 17,
                      "docs": [
                        "Transaction hash does not match given txid"
                      ]
                    },
                    {
                      "name": "InvalidPaymentAmount",
                      "index": 18,
                      "docs": [
                        "Invalid payment amount"
                      ]
                    },
                    {
                      "name": "MalformedTransaction",
                      "index": 19,
                      "docs": [
                        "Transaction has incorrect format"
                      ]
                    },
                    {
                      "name": "InvalidPayment",
                      "index": 20,
                      "docs": [
                        "Incorrect recipient Bitcoin address"
                      ]
                    },
                    {
                      "name": "InvalidOutputFormat",
                      "index": 21,
                      "docs": [
                        "Incorrect transaction output format"
                      ]
                    },
                    {
                      "name": "InvalidOpReturn",
                      "index": 22,
                      "docs": [
                        "Incorrect identifier in OP_RETURN field"
                      ]
                    },
                    {
                      "name": "InvalidTxVersion",
                      "index": 23,
                      "docs": [
                        "Invalid transaction version"
                      ]
                    },
                    {
                      "name": "UnknownErrorcode",
                      "index": 24,
                      "docs": [
                        "Error code not applicable to blocks"
                      ]
                    },
                    {
                      "name": "ForkIdNotFound",
                      "index": 25,
                      "docs": [
                        "Blockchain with requested ID not found"
                      ]
                    },
                    {
                      "name": "BlockNotFound",
                      "index": 26,
                      "docs": [
                        "Block header not found for given hash"
                      ]
                    },
                    {
                      "name": "AlreadyReported",
                      "index": 27,
                      "docs": [
                        "Error code already reported"
                      ]
                    },
                    {
                      "name": "UnauthorizedRelayer",
                      "index": 28,
                      "docs": [
                        "Unauthorized staked relayer"
                      ]
                    },
                    {
                      "name": "ChainCounterOverflow",
                      "index": 29,
                      "docs": [
                        "Overflow of chain counter"
                      ]
                    },
                    {
                      "name": "BlockHeightOverflow",
                      "index": 30,
                      "docs": [
                        "Overflow of block height"
                      ]
                    },
                    {
                      "name": "ChainsUnderflow",
                      "index": 31,
                      "docs": [
                        "Underflow of stored blockchains counter"
                      ]
                    },
                    {
                      "name": "EndOfFile",
                      "index": 32,
                      "docs": [
                        "EndOfFile reached while parsing"
                      ]
                    },
                    {
                      "name": "MalformedHeader",
                      "index": 33,
                      "docs": [
                        "Format of the header is invalid"
                      ]
                    },
                    {
                      "name": "InvalidBlockVersion",
                      "index": 34,
                      "docs": [
                        "Invalid block header version"
                      ]
                    },
                    {
                      "name": "MalformedWitnessOutput",
                      "index": 35,
                      "docs": [
                        "Format of the BIP141 witness transaction output is invalid"
                      ]
                    },
                    {
                      "name": "MalformedP2PKHOutput",
                      "index": 36
                    },
                    {
                      "name": "MalformedP2SHOutput",
                      "index": 37
                    },
                    {
                      "name": "MalformedOpReturnOutput",
                      "index": 38,
                      "docs": [
                        "Format of the OP_RETURN transaction output is invalid"
                      ]
                    },
                    {
                      "name": "UnsupportedOutputFormat",
                      "index": 39
                    },
                    {
                      "name": "UnsupportedInputFormat",
                      "index": 40
                    },
                    {
                      "name": "InvalidBtcHash",
                      "index": 41,
                      "docs": [
                        "User supplied an invalid address"
                      ]
                    },
                    {
                      "name": "InvalidScript",
                      "index": 42,
                      "docs": [
                        "User supplied an invalid script"
                      ]
                    },
                    {
                      "name": "InvalidBtcAddress",
                      "index": 43,
                      "docs": [
                        "Specified invalid Bitcoin address"
                      ]
                    },
                    {
                      "name": "ArithmeticOverflow",
                      "index": 44,
                      "docs": [
                        "Arithmetic overflow"
                      ]
                    },
                    {
                      "name": "ArithmeticUnderflow",
                      "index": 45,
                      "docs": [
                        "Arithmetic underflow"
                      ]
                    },
                    {
                      "name": "TryIntoIntError",
                      "index": 46,
                      "docs": [
                        "TryInto failed on integer"
                      ]
                    },
                    {
                      "name": "InvalidTransaction",
                      "index": 47,
                      "docs": [
                        "Transaction does meet the requirements to be considered valid"
                      ]
                    },
                    {
                      "name": "InvalidOpReturnTransaction",
                      "index": 48,
                      "docs": [
                        "Transaction does meet the requirements to be a valid op-return payment"
                      ]
                    },
                    {
                      "name": "InvalidCompact",
                      "index": 49,
                      "docs": [
                        "Invalid compact value in header"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 197,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 48
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 47
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 198,
            "type": {
              "path": [
                "security",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ParachainNotRunning",
                      "index": 0
                    },
                    {
                      "name": "ParachainShutdown",
                      "index": 1
                    },
                    {
                      "name": "ArithmeticOverflow",
                      "index": 2
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 199,
            "type": {
              "def": {
                "tuple": [
                  38,
                  44
                ]
              }
            }
          },
          {
            "id": 200,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 30
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 30
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 201,
            "type": {
              "path": [
                "relay",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VaultAlreadyReported",
                      "index": 0,
                      "docs": [
                        "Vault already reported"
                      ]
                    },
                    {
                      "name": "VaultNoInputToTransaction",
                      "index": 1,
                      "docs": [
                        "Vault BTC address not in transaction input"
                      ]
                    },
                    {
                      "name": "ValidRedeemTransaction",
                      "index": 2,
                      "docs": [
                        "Valid redeem transaction"
                      ]
                    },
                    {
                      "name": "ValidReplaceTransaction",
                      "index": 3,
                      "docs": [
                        "Valid replace transaction"
                      ]
                    },
                    {
                      "name": "ValidRefundTransaction",
                      "index": 4,
                      "docs": [
                        "Valid refund transaction"
                      ]
                    },
                    {
                      "name": "ValidMergeTransaction",
                      "index": 5,
                      "docs": [
                        "Valid merge transaction"
                      ]
                    },
                    {
                      "name": "InvalidTransaction",
                      "index": 6,
                      "docs": [
                        "Failed to parse transaction"
                      ]
                    },
                    {
                      "name": "TryIntoIntError",
                      "index": 7,
                      "docs": [
                        "Unable to convert value"
                      ]
                    },
                    {
                      "name": "DuplicateTransaction",
                      "index": 8,
                      "docs": [
                        "Expected two unique transactions"
                      ]
                    },
                    {
                      "name": "ExpectedDuplicate",
                      "index": 9,
                      "docs": [
                        "Expected duplicate OP_RETURN ids"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 202,
            "type": {
              "path": [
                "vault_registry",
                "types",
                "SystemVault"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "CurrencyId",
                  "type": 36
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "to_be_issued_tokens",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "issued_tokens",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "to_be_redeemed_tokens",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "collateral",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "currency_pair",
                      "type": 39,
                      "typeName": "VaultCurrencyPair<CurrencyId>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 203,
            "type": {
              "path": [
                "vault_registry",
                "types",
                "Vault"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "CurrencyId",
                  "type": 36
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 38,
                      "typeName": "VaultId<AccountId, CurrencyId>"
                    },
                    {
                      "name": "wallet",
                      "type": 204,
                      "typeName": "Wallet"
                    },
                    {
                      "name": "status",
                      "type": 56,
                      "typeName": "VaultStatus"
                    },
                    {
                      "name": "banned_until",
                      "type": 121,
                      "typeName": "Option<BlockNumber>"
                    },
                    {
                      "name": "to_be_issued_tokens",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "issued_tokens",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "to_be_redeemed_tokens",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "to_be_replaced_tokens",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "replace_collateral",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "active_replace_collateral",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "liquidated_collateral",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 204,
            "type": {
              "path": [
                "vault_registry",
                "types",
                "Wallet"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "addresses",
                      "type": 205,
                      "typeName": "BTreeSet<BtcAddress>"
                    },
                    {
                      "name": "public_key",
                      "type": 51,
                      "typeName": "BtcPublicKey"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 205,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 53
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 206
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 206,
            "type": {
              "def": {
                "sequence": {
                  "type": 53
                }
              }
            }
          },
          {
            "id": 207,
            "type": {
              "path": [
                "vault_registry",
                "types",
                "Version"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "index": 1
                    },
                    {
                      "name": "V2",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 208,
            "type": {
              "path": [
                "frame_support",
                "PalletId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 106,
                      "typeName": "[u8; 8]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 209,
            "type": {
              "path": [
                "vault_registry",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientCollateral",
                      "index": 0,
                      "docs": [
                        "Not enough free collateral available."
                      ]
                    },
                    {
                      "name": "ExceedingVaultLimit",
                      "index": 1,
                      "docs": [
                        "The amount of tokens to be issued is higher than the issuable amount by the vault"
                      ]
                    },
                    {
                      "name": "InsufficientTokensCommitted",
                      "index": 2,
                      "docs": [
                        "The requested amount of tokens exceeds the amount available to this vault."
                      ]
                    },
                    {
                      "name": "VaultBanned",
                      "index": 3,
                      "docs": [
                        "Action not allowed on banned vault."
                      ]
                    },
                    {
                      "name": "InsufficientVaultCollateralAmount",
                      "index": 4,
                      "docs": [
                        "The provided collateral was insufficient - it must be above ``MinimumCollateralVault``."
                      ]
                    },
                    {
                      "name": "VaultAlreadyRegistered",
                      "index": 5,
                      "docs": [
                        "Returned if a vault tries to register while already being registered"
                      ]
                    },
                    {
                      "name": "VaultNotFound",
                      "index": 6,
                      "docs": [
                        "The specified vault does not exist."
                      ]
                    },
                    {
                      "name": "ReservedDepositAddress",
                      "index": 7,
                      "docs": [
                        "The Bitcoin Address has already been registered"
                      ]
                    },
                    {
                      "name": "VaultNotBelowLiquidationThreshold",
                      "index": 8,
                      "docs": [
                        "Attempted to liquidate a vault that is not undercollateralized."
                      ]
                    },
                    {
                      "name": "InvalidPublicKey",
                      "index": 9,
                      "docs": [
                        "Deposit address could not be generated with the given public key."
                      ]
                    },
                    {
                      "name": "MaxNominationRatioViolation",
                      "index": 10,
                      "docs": [
                        "The Max Nomination Ratio would be exceeded."
                      ]
                    },
                    {
                      "name": "CurrencyCeilingExceeded",
                      "index": 11,
                      "docs": [
                        "The collateral ceiling would be exceeded for the vault's currency"
                      ]
                    },
                    {
                      "name": "NoTokensIssued",
                      "index": 12,
                      "docs": [
                        "Collateralization is infinite if no tokens are issued"
                      ]
                    },
                    {
                      "name": "NoVaultWithSufficientCollateral",
                      "index": 13
                    },
                    {
                      "name": "NoVaultWithSufficientTokens",
                      "index": 14
                    },
                    {
                      "name": "NoVaultUnderThePremiumRedeemThreshold",
                      "index": 15
                    },
                    {
                      "name": "InvalidCurrency",
                      "index": 16,
                      "docs": [
                        "Failed attempt to modify vault's collateral because it was in the wrong currency"
                      ]
                    },
                    {
                      "name": "ThresholdNotSet",
                      "index": 17,
                      "docs": [
                        "Threshold was not found for the given currency"
                      ]
                    },
                    {
                      "name": "CeilingNotSet",
                      "index": 18,
                      "docs": [
                        "Ceiling was not found for the given currency"
                      ]
                    },
                    {
                      "name": "ArithmeticOverflow",
                      "index": 19
                    },
                    {
                      "name": "ArithmeticUnderflow",
                      "index": 20
                    },
                    {
                      "name": "TryIntoIntError",
                      "index": 21,
                      "docs": [
                        "Unable to convert value"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 210,
            "type": {
              "def": {
                "tuple": [
                  61,
                  0
                ]
              }
            }
          },
          {
            "id": 211,
            "type": {
              "path": [
                "oracle",
                "TimestampedValue"
              ],
              "params": [
                {
                  "name": "Value",
                  "type": 62
                },
                {
                  "name": "Moment",
                  "type": 8
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "value",
                      "type": 62,
                      "typeName": "Value"
                    },
                    {
                      "name": "timestamp",
                      "type": 8,
                      "typeName": "Moment"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 212,
            "type": {
              "path": [
                "oracle",
                "types",
                "Version"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 213,
            "type": {
              "path": [
                "oracle",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidOracleSource",
                      "index": 0,
                      "docs": [
                        "Not authorized to set exchange rate"
                      ]
                    },
                    {
                      "name": "MissingExchangeRate",
                      "index": 1,
                      "docs": [
                        "Exchange rate not specified or has expired"
                      ]
                    },
                    {
                      "name": "TryIntoIntError",
                      "index": 2,
                      "docs": [
                        "Unable to convert value"
                      ]
                    },
                    {
                      "name": "ArithmeticOverflow",
                      "index": 3,
                      "docs": [
                        "Mathematical operation caused an overflow"
                      ]
                    },
                    {
                      "name": "ArithmeticUnderflow",
                      "index": 4,
                      "docs": [
                        "Mathematical operation caused an underflow"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 214,
            "type": {
              "path": [
                "interbtc_primitives",
                "issue",
                "IssueRequest"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "CurrencyId",
                  "type": 36
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "vault",
                      "type": 38,
                      "typeName": "VaultId<AccountId, CurrencyId>"
                    },
                    {
                      "name": "opentime",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "period",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "griefing_collateral",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "requester",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "btc_address",
                      "type": 53,
                      "typeName": "BtcAddress"
                    },
                    {
                      "name": "btc_public_key",
                      "type": 51,
                      "typeName": "BtcPublicKey"
                    },
                    {
                      "name": "btc_height",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "status",
                      "type": 215,
                      "typeName": "IssueRequestStatus"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 215,
            "type": {
              "path": [
                "interbtc_primitives",
                "issue",
                "IssueRequestStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Pending",
                      "index": 0
                    },
                    {
                      "name": "Completed",
                      "fields": [
                        {
                          "type": 123,
                          "typeName": "Option<H256>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Cancelled",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 216,
            "type": {
              "path": [
                "issue",
                "types",
                "Version"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "index": 1
                    },
                    {
                      "name": "V2",
                      "index": 2
                    },
                    {
                      "name": "V3",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 217,
            "type": {
              "path": [
                "issue",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientCollateral",
                      "index": 0
                    },
                    {
                      "name": "IssueIdNotFound",
                      "index": 1
                    },
                    {
                      "name": "CommitPeriodExpired",
                      "index": 2
                    },
                    {
                      "name": "TimeNotExpired",
                      "index": 3
                    },
                    {
                      "name": "IssueCompleted",
                      "index": 4
                    },
                    {
                      "name": "IssueCancelled",
                      "index": 5
                    },
                    {
                      "name": "VaultNotAcceptingNewIssues",
                      "index": 6
                    },
                    {
                      "name": "WaitingForRelayerInitialization",
                      "index": 7
                    },
                    {
                      "name": "TryIntoIntError",
                      "index": 8,
                      "docs": [
                        "Unable to convert value"
                      ]
                    },
                    {
                      "name": "ArithmeticUnderflow",
                      "index": 9
                    },
                    {
                      "name": "ArithmeticOverflow",
                      "index": 10
                    },
                    {
                      "name": "InvalidExecutor",
                      "index": 11
                    },
                    {
                      "name": "AmountBelowDustAmount",
                      "index": 12
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 218,
            "type": {
              "path": [
                "interbtc_primitives",
                "redeem",
                "RedeemRequest"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "CurrencyId",
                  "type": 36
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "vault",
                      "type": 38,
                      "typeName": "VaultId<AccountId, CurrencyId>"
                    },
                    {
                      "name": "opentime",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "period",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "transfer_fee_btc",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "amount_btc",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "premium",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "redeemer",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "btc_address",
                      "type": 53,
                      "typeName": "BtcAddress"
                    },
                    {
                      "name": "btc_height",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "status",
                      "type": 65,
                      "typeName": "RedeemRequestStatus"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 219,
            "type": {
              "path": [
                "redeem",
                "types",
                "Version"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "index": 1
                    },
                    {
                      "name": "V2",
                      "index": 2
                    },
                    {
                      "name": "V3",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 220,
            "type": {
              "path": [
                "redeem",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AmountExceedsUserBalance",
                      "index": 0
                    },
                    {
                      "name": "AmountExceedsVaultBalance",
                      "index": 1
                    },
                    {
                      "name": "CommitPeriodExpired",
                      "index": 2
                    },
                    {
                      "name": "UnauthorizedUser",
                      "index": 3
                    },
                    {
                      "name": "TimeNotExpired",
                      "index": 4
                    },
                    {
                      "name": "RedeemCancelled",
                      "index": 5
                    },
                    {
                      "name": "RedeemCompleted",
                      "index": 6
                    },
                    {
                      "name": "RedeemIdNotFound",
                      "index": 7
                    },
                    {
                      "name": "TryIntoIntError",
                      "index": 8,
                      "docs": [
                        "Unable to convert value"
                      ]
                    },
                    {
                      "name": "ArithmeticOverflow",
                      "index": 9
                    },
                    {
                      "name": "ArithmeticUnderflow",
                      "index": 10
                    },
                    {
                      "name": "AmountBelowDustAmount",
                      "index": 11
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 221,
            "type": {
              "path": [
                "interbtc_primitives",
                "replace",
                "ReplaceRequest"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "CurrencyId",
                  "type": 36
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "old_vault",
                      "type": 38,
                      "typeName": "VaultId<AccountId, CurrencyId>"
                    },
                    {
                      "name": "new_vault",
                      "type": 38,
                      "typeName": "VaultId<AccountId, CurrencyId>"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "griefing_collateral",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "collateral",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "accept_time",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "period",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "btc_address",
                      "type": 53,
                      "typeName": "BtcAddress"
                    },
                    {
                      "name": "btc_height",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "status",
                      "type": 222,
                      "typeName": "ReplaceRequestStatus"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 222,
            "type": {
              "path": [
                "interbtc_primitives",
                "replace",
                "ReplaceRequestStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Pending",
                      "index": 0
                    },
                    {
                      "name": "Completed",
                      "index": 1
                    },
                    {
                      "name": "Cancelled",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 223,
            "type": {
              "path": [
                "replace",
                "types",
                "Version"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "index": 1
                    },
                    {
                      "name": "V2",
                      "index": 2
                    },
                    {
                      "name": "V3",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 224,
            "type": {
              "path": [
                "replace",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AmountBelowDustAmount",
                      "index": 0
                    },
                    {
                      "name": "NoReplacement",
                      "index": 1
                    },
                    {
                      "name": "InsufficientCollateral",
                      "index": 2
                    },
                    {
                      "name": "NoPendingRequest",
                      "index": 3
                    },
                    {
                      "name": "UnauthorizedVault",
                      "index": 4
                    },
                    {
                      "name": "ReplaceSelfNotAllowed",
                      "index": 5
                    },
                    {
                      "name": "CancelAcceptedRequest",
                      "index": 6
                    },
                    {
                      "name": "CollateralBelowSecureThreshold",
                      "index": 7
                    },
                    {
                      "name": "VaultHasEnabledNomination",
                      "index": 8
                    },
                    {
                      "name": "ReplacePeriodExpired",
                      "index": 9
                    },
                    {
                      "name": "ReplacePeriodNotExpired",
                      "index": 10
                    },
                    {
                      "name": "ReplaceCompleted",
                      "index": 11
                    },
                    {
                      "name": "ReplaceCancelled",
                      "index": 12
                    },
                    {
                      "name": "ReplaceIdNotFound",
                      "index": 13
                    },
                    {
                      "name": "InvalidWrappedCurrency",
                      "index": 14
                    },
                    {
                      "name": "TryIntoIntError",
                      "index": 15,
                      "docs": [
                        "Unable to convert value"
                      ]
                    },
                    {
                      "name": "ArithmeticUnderflow",
                      "index": 16
                    },
                    {
                      "name": "ArithmeticOverflow",
                      "index": 17
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 225,
            "type": {
              "path": [
                "fee",
                "types",
                "Version"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 226,
            "type": {
              "path": [
                "fee",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ArithmeticOverflow",
                      "index": 0
                    },
                    {
                      "name": "ArithmeticUnderflow",
                      "index": 1
                    },
                    {
                      "name": "InvalidRewardDist",
                      "index": 2
                    },
                    {
                      "name": "TryIntoIntError",
                      "index": 3
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 227,
            "type": {
              "path": [
                "interbtc_primitives",
                "refund",
                "RefundRequest"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "CurrencyId",
                  "type": 36
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "vault",
                      "type": 38,
                      "typeName": "VaultId<AccountId, CurrencyId>"
                    },
                    {
                      "name": "amount_btc",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "transfer_fee_btc",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "issuer",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "btc_address",
                      "type": 53,
                      "typeName": "BtcAddress"
                    },
                    {
                      "name": "issue_id",
                      "type": 9,
                      "typeName": "H256"
                    },
                    {
                      "name": "completed",
                      "type": 57,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 228,
            "type": {
              "path": [
                "refund",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ArithmeticUnderflow",
                      "index": 0
                    },
                    {
                      "name": "ArithmeticOverflow",
                      "index": 1
                    },
                    {
                      "name": "NoRefundFoundForIssueId",
                      "index": 2
                    },
                    {
                      "name": "RefundIdNotFound",
                      "index": 3
                    },
                    {
                      "name": "RefundCompleted",
                      "index": 4
                    },
                    {
                      "name": "TryIntoIntError",
                      "index": 5
                    },
                    {
                      "name": "UnauthorizedVault",
                      "index": 6
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 229,
            "type": {
              "path": [
                "nomination",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientFunds",
                      "index": 0,
                      "docs": [
                        "Account has insufficient balance"
                      ]
                    },
                    {
                      "name": "ArithmeticOverflow",
                      "index": 1
                    },
                    {
                      "name": "ArithmeticUnderflow",
                      "index": 2
                    },
                    {
                      "name": "VaultAlreadyOptedInToNomination",
                      "index": 3
                    },
                    {
                      "name": "VaultNotOptedInToNomination",
                      "index": 4
                    },
                    {
                      "name": "VaultNotFound",
                      "index": 5
                    },
                    {
                      "name": "TryIntoIntError",
                      "index": 6
                    },
                    {
                      "name": "InsufficientCollateral",
                      "index": 7
                    },
                    {
                      "name": "VaultNominationDisabled",
                      "index": 8
                    },
                    {
                      "name": "DepositViolatesMaxNominationRatio",
                      "index": 9
                    },
                    {
                      "name": "HasNominatedCollateral",
                      "index": 10
                    },
                    {
                      "name": "CollateralizationTooLow",
                      "index": 11
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 230,
            "type": {
              "def": {
                "sequence": {
                  "type": 231
                }
              }
            }
          },
          {
            "id": 231,
            "type": {
              "def": {
                "tuple": [
                  4,
                  9,
                  0
                ]
              }
            }
          },
          {
            "id": 232,
            "type": {
              "def": {
                "tuple": [
                  70,
                  6
                ]
              }
            }
          },
          {
            "id": 233,
            "type": {
              "path": [
                "pallet_democracy",
                "PreimageStatus"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Missing",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Available",
                      "fields": [
                        {
                          "name": "data",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "provider",
                          "type": 0,
                          "typeName": "AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "since",
                          "type": 4,
                          "typeName": "BlockNumber"
                        },
                        {
                          "name": "expiry",
                          "type": 121,
                          "typeName": "Option<BlockNumber>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 234,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "ReferendumInfo"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ongoing",
                      "fields": [
                        {
                          "type": 235,
                          "typeName": "ReferendumStatus<BlockNumber, Hash, Balance>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Finished",
                      "fields": [
                        {
                          "name": "approved",
                          "type": 57,
                          "typeName": "bool"
                        },
                        {
                          "name": "end",
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 235,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "ReferendumStatus"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "proposal_hash",
                      "type": 9,
                      "typeName": "Hash"
                    },
                    {
                      "name": "threshold",
                      "type": 71,
                      "typeName": "VoteThreshold"
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "tally",
                      "type": 236,
                      "typeName": "Tally<Balance>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 236,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "Tally"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ayes",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "nays",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "turnout",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 237,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "Voting"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Direct",
                      "fields": [
                        {
                          "name": "votes",
                          "type": 238,
                          "typeName": "Vec<(ReferendumIndex, AccountVote<Balance>)>"
                        },
                        {
                          "name": "delegations",
                          "type": 240,
                          "typeName": "Delegations<Balance>"
                        },
                        {
                          "name": "prior",
                          "type": 241,
                          "typeName": "PriorLock<BlockNumber, Balance>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Delegating",
                      "fields": [
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "AccountId"
                        },
                        {
                          "name": "conviction",
                          "type": 139,
                          "typeName": "Conviction"
                        },
                        {
                          "name": "delegations",
                          "type": 240,
                          "typeName": "Delegations<Balance>"
                        },
                        {
                          "name": "prior",
                          "type": 241,
                          "typeName": "PriorLock<BlockNumber, Balance>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 238,
            "type": {
              "def": {
                "sequence": {
                  "type": 239
                }
              }
            }
          },
          {
            "id": 239,
            "type": {
              "def": {
                "tuple": [
                  4,
                  137
                ]
              }
            }
          },
          {
            "id": 240,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "Delegations"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "votes",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "capital",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 241,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "PriorLock"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 242,
            "type": {
              "def": {
                "tuple": [
                  9,
                  71
                ]
              }
            }
          },
          {
            "id": 243,
            "type": {
              "def": {
                "tuple": [
                  4,
                  70
                ]
              }
            }
          },
          {
            "id": 244,
            "type": {
              "path": [
                "pallet_democracy",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1",
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 245,
            "type": {
              "path": [
                "pallet_democracy",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ValueLow",
                      "index": 0,
                      "docs": [
                        "Value too low"
                      ]
                    },
                    {
                      "name": "ProposalMissing",
                      "index": 1,
                      "docs": [
                        "Proposal does not exist"
                      ]
                    },
                    {
                      "name": "AlreadyCanceled",
                      "index": 2,
                      "docs": [
                        "Cannot cancel the same proposal twice"
                      ]
                    },
                    {
                      "name": "DuplicateProposal",
                      "index": 3,
                      "docs": [
                        "Proposal already made"
                      ]
                    },
                    {
                      "name": "ProposalBlacklisted",
                      "index": 4,
                      "docs": [
                        "Proposal still blacklisted"
                      ]
                    },
                    {
                      "name": "NotSimpleMajority",
                      "index": 5,
                      "docs": [
                        "Next external proposal not simple majority"
                      ]
                    },
                    {
                      "name": "InvalidHash",
                      "index": 6,
                      "docs": [
                        "Invalid hash"
                      ]
                    },
                    {
                      "name": "NoProposal",
                      "index": 7,
                      "docs": [
                        "No external proposal"
                      ]
                    },
                    {
                      "name": "AlreadyVetoed",
                      "index": 8,
                      "docs": [
                        "Identity may not veto a proposal twice"
                      ]
                    },
                    {
                      "name": "DuplicatePreimage",
                      "index": 9,
                      "docs": [
                        "Preimage already noted"
                      ]
                    },
                    {
                      "name": "NotImminent",
                      "index": 10,
                      "docs": [
                        "Not imminent"
                      ]
                    },
                    {
                      "name": "TooEarly",
                      "index": 11,
                      "docs": [
                        "Too early"
                      ]
                    },
                    {
                      "name": "Imminent",
                      "index": 12,
                      "docs": [
                        "Imminent"
                      ]
                    },
                    {
                      "name": "PreimageMissing",
                      "index": 13,
                      "docs": [
                        "Preimage not found"
                      ]
                    },
                    {
                      "name": "ReferendumInvalid",
                      "index": 14,
                      "docs": [
                        "Vote given for invalid referendum"
                      ]
                    },
                    {
                      "name": "PreimageInvalid",
                      "index": 15,
                      "docs": [
                        "Invalid preimage"
                      ]
                    },
                    {
                      "name": "NoneWaiting",
                      "index": 16,
                      "docs": [
                        "No proposals waiting"
                      ]
                    },
                    {
                      "name": "NotVoter",
                      "index": 17,
                      "docs": [
                        "The given account did not vote on the referendum."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "index": 18,
                      "docs": [
                        "The actor has no permission to conduct the action."
                      ]
                    },
                    {
                      "name": "AlreadyDelegating",
                      "index": 19,
                      "docs": [
                        "The account is already delegating."
                      ]
                    },
                    {
                      "name": "InsufficientFunds",
                      "index": 20,
                      "docs": [
                        "Too high a balance was provided that the account cannot afford."
                      ]
                    },
                    {
                      "name": "NotDelegating",
                      "index": 21,
                      "docs": [
                        "The account is not currently delegating."
                      ]
                    },
                    {
                      "name": "VotesExist",
                      "index": 22,
                      "docs": [
                        "The account currently has votes attached to it and the operation cannot succeed until",
                        "these are removed, either through `unvote` or `reap_vote`."
                      ]
                    },
                    {
                      "name": "InstantNotAllowed",
                      "index": 23,
                      "docs": [
                        "The instant referendum origin is currently disallowed."
                      ]
                    },
                    {
                      "name": "Nonsense",
                      "index": 24,
                      "docs": [
                        "Delegation to oneself makes no sense."
                      ]
                    },
                    {
                      "name": "WrongUpperBound",
                      "index": 25,
                      "docs": [
                        "Invalid upper bound."
                      ]
                    },
                    {
                      "name": "MaxVotesReached",
                      "index": 26,
                      "docs": [
                        "Maximum number of votes reached."
                      ]
                    },
                    {
                      "name": "TooManyProposals",
                      "index": 27,
                      "docs": [
                        "Maximum number of proposals reached."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 246,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 85,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 247,
            "type": {
              "path": [
                "pallet_collective",
                "Votes"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ProposalIndex"
                    },
                    {
                      "name": "threshold",
                      "type": 4,
                      "typeName": "MemberCount"
                    },
                    {
                      "name": "ayes",
                      "type": 70,
                      "typeName": "Vec<AccountId>"
                    },
                    {
                      "name": "nays",
                      "type": 70,
                      "typeName": "Vec<AccountId>"
                    },
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 248,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotMember",
                      "index": 0,
                      "docs": [
                        "Account is not a member"
                      ]
                    },
                    {
                      "name": "DuplicateProposal",
                      "index": 1,
                      "docs": [
                        "Duplicate proposals not allowed"
                      ]
                    },
                    {
                      "name": "ProposalMissing",
                      "index": 2,
                      "docs": [
                        "Proposal must exist"
                      ]
                    },
                    {
                      "name": "WrongIndex",
                      "index": 3,
                      "docs": [
                        "Mismatched index"
                      ]
                    },
                    {
                      "name": "DuplicateVote",
                      "index": 4,
                      "docs": [
                        "Duplicate vote ignored"
                      ]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "index": 5,
                      "docs": [
                        "Members are already initialized!"
                      ]
                    },
                    {
                      "name": "TooEarly",
                      "index": 6,
                      "docs": [
                        "The close call was made too early, before the end of the voting."
                      ]
                    },
                    {
                      "name": "TooManyProposals",
                      "index": 7,
                      "docs": [
                        "There can only be a maximum of `MaxProposals` active proposals."
                      ]
                    },
                    {
                      "name": "WrongProposalWeight",
                      "index": 8,
                      "docs": [
                        "The given weight bound for the proposal was too low."
                      ]
                    },
                    {
                      "name": "WrongProposalLength",
                      "index": 9,
                      "docs": [
                        "The given length bound for the proposal was too low."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 249,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 85,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 250,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotMember",
                      "index": 0,
                      "docs": [
                        "Account is not a member"
                      ]
                    },
                    {
                      "name": "DuplicateProposal",
                      "index": 1,
                      "docs": [
                        "Duplicate proposals not allowed"
                      ]
                    },
                    {
                      "name": "ProposalMissing",
                      "index": 2,
                      "docs": [
                        "Proposal must exist"
                      ]
                    },
                    {
                      "name": "WrongIndex",
                      "index": 3,
                      "docs": [
                        "Mismatched index"
                      ]
                    },
                    {
                      "name": "DuplicateVote",
                      "index": 4,
                      "docs": [
                        "Duplicate vote ignored"
                      ]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "index": 5,
                      "docs": [
                        "Members are already initialized!"
                      ]
                    },
                    {
                      "name": "TooEarly",
                      "index": 6,
                      "docs": [
                        "The close call was made too early, before the end of the voting."
                      ]
                    },
                    {
                      "name": "TooManyProposals",
                      "index": 7,
                      "docs": [
                        "There can only be a maximum of `MaxProposals` active proposals."
                      ]
                    },
                    {
                      "name": "WrongProposalWeight",
                      "index": 8,
                      "docs": [
                        "The given weight bound for the proposal was too low."
                      ]
                    },
                    {
                      "name": "WrongProposalLength",
                      "index": 9,
                      "docs": [
                        "The given length bound for the proposal was too low."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 251,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyMember",
                      "index": 0,
                      "docs": [
                        "Already a member."
                      ]
                    },
                    {
                      "name": "NotMember",
                      "index": 1,
                      "docs": [
                        "Not a member."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 252,
            "type": {
              "path": [
                "pallet_treasury",
                "Proposal"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "proposer",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "beneficiary",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 253,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 254,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 254,
            "type": {
              "def": {
                "sequence": {
                  "type": 4
                }
              }
            }
          },
          {
            "id": 255,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Permill"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 256,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientProposersBalance",
                      "index": 0,
                      "docs": [
                        "Proposer's balance is too low."
                      ]
                    },
                    {
                      "name": "InvalidIndex",
                      "index": 1,
                      "docs": [
                        "No proposal or bounty at that index."
                      ]
                    },
                    {
                      "name": "TooManyApprovals",
                      "index": 2,
                      "docs": [
                        "Too many approvals in the queue."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the treasury pallet."
              ]
            }
          },
          {
            "id": 257,
            "type": {
              "def": {
                "sequence": {
                  "type": 258
                }
              }
            }
          },
          {
            "id": 258,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "SeatHolder"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "stake",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 259,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "Voter"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "votes",
                      "type": 70,
                      "typeName": "Vec<AccountId>"
                    },
                    {
                      "name": "stake",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 260,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "UnableToVote",
                      "index": 0,
                      "docs": [
                        "Cannot vote when no candidates or members exist."
                      ]
                    },
                    {
                      "name": "NoVotes",
                      "index": 1,
                      "docs": [
                        "Must vote for at least one candidate."
                      ]
                    },
                    {
                      "name": "TooManyVotes",
                      "index": 2,
                      "docs": [
                        "Cannot vote more than candidates."
                      ]
                    },
                    {
                      "name": "MaximumVotesExceeded",
                      "index": 3,
                      "docs": [
                        "Cannot vote more than maximum allowed."
                      ]
                    },
                    {
                      "name": "LowBalance",
                      "index": 4,
                      "docs": [
                        "Cannot vote with stake less than minimum balance."
                      ]
                    },
                    {
                      "name": "UnableToPayBond",
                      "index": 5,
                      "docs": [
                        "Voter can not pay voting bond."
                      ]
                    },
                    {
                      "name": "MustBeVoter",
                      "index": 6,
                      "docs": [
                        "Must be a voter."
                      ]
                    },
                    {
                      "name": "ReportSelf",
                      "index": 7,
                      "docs": [
                        "Cannot report self."
                      ]
                    },
                    {
                      "name": "DuplicatedCandidate",
                      "index": 8,
                      "docs": [
                        "Duplicated candidate submission."
                      ]
                    },
                    {
                      "name": "MemberSubmit",
                      "index": 9,
                      "docs": [
                        "Member cannot re-submit candidacy."
                      ]
                    },
                    {
                      "name": "RunnerUpSubmit",
                      "index": 10,
                      "docs": [
                        "Runner cannot re-submit candidacy."
                      ]
                    },
                    {
                      "name": "InsufficientCandidateFunds",
                      "index": 11,
                      "docs": [
                        "Candidate does not have enough funds."
                      ]
                    },
                    {
                      "name": "NotMember",
                      "index": 12,
                      "docs": [
                        "Not a member."
                      ]
                    },
                    {
                      "name": "InvalidWitnessData",
                      "index": 13,
                      "docs": [
                        "The provided count of number of candidates is incorrect."
                      ]
                    },
                    {
                      "name": "InvalidVoteCount",
                      "index": 14,
                      "docs": [
                        "The provided count of number of votes is incorrect."
                      ]
                    },
                    {
                      "name": "InvalidRenouncing",
                      "index": 15,
                      "docs": [
                        "The renouncing origin presented a wrong `Renouncing` parameter."
                      ]
                    },
                    {
                      "name": "InvalidReplacement",
                      "index": 16,
                      "docs": [
                        "Prediction regarding replacement after member removal is wrong."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 261,
            "type": {
              "path": [
                "pallet_grandpa",
                "StoredState"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Live",
                      "index": 0
                    },
                    {
                      "name": "PendingPause",
                      "fields": [
                        {
                          "name": "scheduled_at",
                          "type": 4,
                          "typeName": "N"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "N"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Paused",
                      "index": 2
                    },
                    {
                      "name": "PendingResume",
                      "fields": [
                        {
                          "name": "scheduled_at",
                          "type": 4,
                          "typeName": "N"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "N"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 262,
            "type": {
              "path": [
                "pallet_grandpa",
                "StoredPendingChange"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                },
                {
                  "name": "Limit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "scheduled_at",
                      "type": 4,
                      "typeName": "N"
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "N"
                    },
                    {
                      "name": "next_authorities",
                      "type": 263,
                      "typeName": "BoundedAuthorityList<Limit>"
                    },
                    {
                      "name": "forced",
                      "type": 121,
                      "typeName": "Option<N>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 263,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 81
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 80,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 264,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PauseFailed",
                      "index": 0,
                      "docs": [
                        "Attempt to signal GRANDPA pause when the authority set isn't live",
                        "(either paused or already pending pause)."
                      ]
                    },
                    {
                      "name": "ResumeFailed",
                      "index": 1,
                      "docs": [
                        "Attempt to signal GRANDPA resume when the authority set isn't paused",
                        "(either live or already pending resume)."
                      ]
                    },
                    {
                      "name": "ChangePending",
                      "index": 2,
                      "docs": [
                        "Attempt to signal GRANDPA change with one already pending."
                      ]
                    },
                    {
                      "name": "TooSoon",
                      "index": 3,
                      "docs": [
                        "Cannot signal forced change so soon after last."
                      ]
                    },
                    {
                      "name": "InvalidKeyOwnershipProof",
                      "index": 4,
                      "docs": [
                        "A key ownership proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "InvalidEquivocationProof",
                      "index": 5,
                      "docs": [
                        "An equivocation proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "DuplicateOffenceReport",
                      "index": 6,
                      "docs": [
                        "A given equivocation report is valid but already previously reported."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 265,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 0
                },
                {
                  "name": "Call",
                  "type": 112
                },
                {
                  "name": "Signature",
                  "type": 266
                },
                {
                  "name": "Extra",
                  "type": 270
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 266,
            "type": {
              "path": [
                "sp_runtime",
                "MultiSignature"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "type": 153,
                          "typeName": "ed25519::Signature"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "type": 267,
                          "typeName": "sr25519::Signature"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "type": 268,
                          "typeName": "ecdsa::Signature"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 267,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 154,
                      "typeName": "[u8; 64]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 268,
            "type": {
              "path": [
                "sp_core",
                "ecdsa",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 269,
                      "typeName": "[u8; 65]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 269,
            "type": {
              "def": {
                "array": {
                  "len": 65,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 270,
            "type": {
              "def": {
                "tuple": [
                  271,
                  272,
                  273,
                  274,
                  276,
                  277,
                  278
                ]
              }
            }
          },
          {
            "id": 271,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_spec_version",
                "CheckSpecVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 272,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_tx_version",
                "CheckTxVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 273,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_genesis",
                "CheckGenesis"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 274,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_mortality",
                "CheckMortality"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 275,
                      "typeName": "Era"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 275,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "era",
                "Era"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Immortal",
                      "index": 0
                    },
                    {
                      "name": "Mortal1",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Mortal2",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Mortal3",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Mortal4",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Mortal5",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Mortal6",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Mortal7",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Mortal8",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Mortal9",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Mortal10",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Mortal11",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Mortal12",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "Mortal13",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "Mortal14",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "Mortal15",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "Mortal16",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "Mortal17",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "Mortal18",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "Mortal19",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Mortal20",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Mortal21",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Mortal22",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "Mortal23",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Mortal24",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Mortal25",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "Mortal26",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "Mortal27",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 27
                    },
                    {
                      "name": "Mortal28",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "Mortal29",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "Mortal30",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "Mortal31",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "Mortal32",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "Mortal33",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "Mortal34",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "Mortal35",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "Mortal36",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 36
                    },
                    {
                      "name": "Mortal37",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "Mortal38",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "Mortal39",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 39
                    },
                    {
                      "name": "Mortal40",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "Mortal41",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "Mortal42",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "Mortal43",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "Mortal44",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "Mortal45",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 45
                    },
                    {
                      "name": "Mortal46",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 46
                    },
                    {
                      "name": "Mortal47",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 47
                    },
                    {
                      "name": "Mortal48",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 48
                    },
                    {
                      "name": "Mortal49",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 49
                    },
                    {
                      "name": "Mortal50",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "Mortal51",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 51
                    },
                    {
                      "name": "Mortal52",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 52
                    },
                    {
                      "name": "Mortal53",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 53
                    },
                    {
                      "name": "Mortal54",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 54
                    },
                    {
                      "name": "Mortal55",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 55
                    },
                    {
                      "name": "Mortal56",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 56
                    },
                    {
                      "name": "Mortal57",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 57
                    },
                    {
                      "name": "Mortal58",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 58
                    },
                    {
                      "name": "Mortal59",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 59
                    },
                    {
                      "name": "Mortal60",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 60
                    },
                    {
                      "name": "Mortal61",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 61
                    },
                    {
                      "name": "Mortal62",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 62
                    },
                    {
                      "name": "Mortal63",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 63
                    },
                    {
                      "name": "Mortal64",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 64
                    },
                    {
                      "name": "Mortal65",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 65
                    },
                    {
                      "name": "Mortal66",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 66
                    },
                    {
                      "name": "Mortal67",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 67
                    },
                    {
                      "name": "Mortal68",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 68
                    },
                    {
                      "name": "Mortal69",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 69
                    },
                    {
                      "name": "Mortal70",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 70
                    },
                    {
                      "name": "Mortal71",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 71
                    },
                    {
                      "name": "Mortal72",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 72
                    },
                    {
                      "name": "Mortal73",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 73
                    },
                    {
                      "name": "Mortal74",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 74
                    },
                    {
                      "name": "Mortal75",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 75
                    },
                    {
                      "name": "Mortal76",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 76
                    },
                    {
                      "name": "Mortal77",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 77
                    },
                    {
                      "name": "Mortal78",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 78
                    },
                    {
                      "name": "Mortal79",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 79
                    },
                    {
                      "name": "Mortal80",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 80
                    },
                    {
                      "name": "Mortal81",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 81
                    },
                    {
                      "name": "Mortal82",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 82
                    },
                    {
                      "name": "Mortal83",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 83
                    },
                    {
                      "name": "Mortal84",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 84
                    },
                    {
                      "name": "Mortal85",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 85
                    },
                    {
                      "name": "Mortal86",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 86
                    },
                    {
                      "name": "Mortal87",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 87
                    },
                    {
                      "name": "Mortal88",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 88
                    },
                    {
                      "name": "Mortal89",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 89
                    },
                    {
                      "name": "Mortal90",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 90
                    },
                    {
                      "name": "Mortal91",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 91
                    },
                    {
                      "name": "Mortal92",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 92
                    },
                    {
                      "name": "Mortal93",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 93
                    },
                    {
                      "name": "Mortal94",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 94
                    },
                    {
                      "name": "Mortal95",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 95
                    },
                    {
                      "name": "Mortal96",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 96
                    },
                    {
                      "name": "Mortal97",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 97
                    },
                    {
                      "name": "Mortal98",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 98
                    },
                    {
                      "name": "Mortal99",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 99
                    },
                    {
                      "name": "Mortal100",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 100
                    },
                    {
                      "name": "Mortal101",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 101
                    },
                    {
                      "name": "Mortal102",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 102
                    },
                    {
                      "name": "Mortal103",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 103
                    },
                    {
                      "name": "Mortal104",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 104
                    },
                    {
                      "name": "Mortal105",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 105
                    },
                    {
                      "name": "Mortal106",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 106
                    },
                    {
                      "name": "Mortal107",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 107
                    },
                    {
                      "name": "Mortal108",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 108
                    },
                    {
                      "name": "Mortal109",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 109
                    },
                    {
                      "name": "Mortal110",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 110
                    },
                    {
                      "name": "Mortal111",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 111
                    },
                    {
                      "name": "Mortal112",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 112
                    },
                    {
                      "name": "Mortal113",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 113
                    },
                    {
                      "name": "Mortal114",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 114
                    },
                    {
                      "name": "Mortal115",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 115
                    },
                    {
                      "name": "Mortal116",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 116
                    },
                    {
                      "name": "Mortal117",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 117
                    },
                    {
                      "name": "Mortal118",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 118
                    },
                    {
                      "name": "Mortal119",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 119
                    },
                    {
                      "name": "Mortal120",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 120
                    },
                    {
                      "name": "Mortal121",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 121
                    },
                    {
                      "name": "Mortal122",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 122
                    },
                    {
                      "name": "Mortal123",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 123
                    },
                    {
                      "name": "Mortal124",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 124
                    },
                    {
                      "name": "Mortal125",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 125
                    },
                    {
                      "name": "Mortal126",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 126
                    },
                    {
                      "name": "Mortal127",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 127
                    },
                    {
                      "name": "Mortal128",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 128
                    },
                    {
                      "name": "Mortal129",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 129
                    },
                    {
                      "name": "Mortal130",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 130
                    },
                    {
                      "name": "Mortal131",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 131
                    },
                    {
                      "name": "Mortal132",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 132
                    },
                    {
                      "name": "Mortal133",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 133
                    },
                    {
                      "name": "Mortal134",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 134
                    },
                    {
                      "name": "Mortal135",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 135
                    },
                    {
                      "name": "Mortal136",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 136
                    },
                    {
                      "name": "Mortal137",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 137
                    },
                    {
                      "name": "Mortal138",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 138
                    },
                    {
                      "name": "Mortal139",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 139
                    },
                    {
                      "name": "Mortal140",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 140
                    },
                    {
                      "name": "Mortal141",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 141
                    },
                    {
                      "name": "Mortal142",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 142
                    },
                    {
                      "name": "Mortal143",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 143
                    },
                    {
                      "name": "Mortal144",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 144
                    },
                    {
                      "name": "Mortal145",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 145
                    },
                    {
                      "name": "Mortal146",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 146
                    },
                    {
                      "name": "Mortal147",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 147
                    },
                    {
                      "name": "Mortal148",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 148
                    },
                    {
                      "name": "Mortal149",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 149
                    },
                    {
                      "name": "Mortal150",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 150
                    },
                    {
                      "name": "Mortal151",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 151
                    },
                    {
                      "name": "Mortal152",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 152
                    },
                    {
                      "name": "Mortal153",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 153
                    },
                    {
                      "name": "Mortal154",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 154
                    },
                    {
                      "name": "Mortal155",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 155
                    },
                    {
                      "name": "Mortal156",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 156
                    },
                    {
                      "name": "Mortal157",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 157
                    },
                    {
                      "name": "Mortal158",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 158
                    },
                    {
                      "name": "Mortal159",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 159
                    },
                    {
                      "name": "Mortal160",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 160
                    },
                    {
                      "name": "Mortal161",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 161
                    },
                    {
                      "name": "Mortal162",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 162
                    },
                    {
                      "name": "Mortal163",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 163
                    },
                    {
                      "name": "Mortal164",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 164
                    },
                    {
                      "name": "Mortal165",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 165
                    },
                    {
                      "name": "Mortal166",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 166
                    },
                    {
                      "name": "Mortal167",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 167
                    },
                    {
                      "name": "Mortal168",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 168
                    },
                    {
                      "name": "Mortal169",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 169
                    },
                    {
                      "name": "Mortal170",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 170
                    },
                    {
                      "name": "Mortal171",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 171
                    },
                    {
                      "name": "Mortal172",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 172
                    },
                    {
                      "name": "Mortal173",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 173
                    },
                    {
                      "name": "Mortal174",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 174
                    },
                    {
                      "name": "Mortal175",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 175
                    },
                    {
                      "name": "Mortal176",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 176
                    },
                    {
                      "name": "Mortal177",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 177
                    },
                    {
                      "name": "Mortal178",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 178
                    },
                    {
                      "name": "Mortal179",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 179
                    },
                    {
                      "name": "Mortal180",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 180
                    },
                    {
                      "name": "Mortal181",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 181
                    },
                    {
                      "name": "Mortal182",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 182
                    },
                    {
                      "name": "Mortal183",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 183
                    },
                    {
                      "name": "Mortal184",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 184
                    },
                    {
                      "name": "Mortal185",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 185
                    },
                    {
                      "name": "Mortal186",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 186
                    },
                    {
                      "name": "Mortal187",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 187
                    },
                    {
                      "name": "Mortal188",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 188
                    },
                    {
                      "name": "Mortal189",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 189
                    },
                    {
                      "name": "Mortal190",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 190
                    },
                    {
                      "name": "Mortal191",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 191
                    },
                    {
                      "name": "Mortal192",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 192
                    },
                    {
                      "name": "Mortal193",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 193
                    },
                    {
                      "name": "Mortal194",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 194
                    },
                    {
                      "name": "Mortal195",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 195
                    },
                    {
                      "name": "Mortal196",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 196
                    },
                    {
                      "name": "Mortal197",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 197
                    },
                    {
                      "name": "Mortal198",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 198
                    },
                    {
                      "name": "Mortal199",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 199
                    },
                    {
                      "name": "Mortal200",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 200
                    },
                    {
                      "name": "Mortal201",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 201
                    },
                    {
                      "name": "Mortal202",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 202
                    },
                    {
                      "name": "Mortal203",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 203
                    },
                    {
                      "name": "Mortal204",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 204
                    },
                    {
                      "name": "Mortal205",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 205
                    },
                    {
                      "name": "Mortal206",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 206
                    },
                    {
                      "name": "Mortal207",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 207
                    },
                    {
                      "name": "Mortal208",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 208
                    },
                    {
                      "name": "Mortal209",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 209
                    },
                    {
                      "name": "Mortal210",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 210
                    },
                    {
                      "name": "Mortal211",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 211
                    },
                    {
                      "name": "Mortal212",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 212
                    },
                    {
                      "name": "Mortal213",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 213
                    },
                    {
                      "name": "Mortal214",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 214
                    },
                    {
                      "name": "Mortal215",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 215
                    },
                    {
                      "name": "Mortal216",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 216
                    },
                    {
                      "name": "Mortal217",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 217
                    },
                    {
                      "name": "Mortal218",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 218
                    },
                    {
                      "name": "Mortal219",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 219
                    },
                    {
                      "name": "Mortal220",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 220
                    },
                    {
                      "name": "Mortal221",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 221
                    },
                    {
                      "name": "Mortal222",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 222
                    },
                    {
                      "name": "Mortal223",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 223
                    },
                    {
                      "name": "Mortal224",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 224
                    },
                    {
                      "name": "Mortal225",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 225
                    },
                    {
                      "name": "Mortal226",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 226
                    },
                    {
                      "name": "Mortal227",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 227
                    },
                    {
                      "name": "Mortal228",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 228
                    },
                    {
                      "name": "Mortal229",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 229
                    },
                    {
                      "name": "Mortal230",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 230
                    },
                    {
                      "name": "Mortal231",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 231
                    },
                    {
                      "name": "Mortal232",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 232
                    },
                    {
                      "name": "Mortal233",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 233
                    },
                    {
                      "name": "Mortal234",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 234
                    },
                    {
                      "name": "Mortal235",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 235
                    },
                    {
                      "name": "Mortal236",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 236
                    },
                    {
                      "name": "Mortal237",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 237
                    },
                    {
                      "name": "Mortal238",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 238
                    },
                    {
                      "name": "Mortal239",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 239
                    },
                    {
                      "name": "Mortal240",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 240
                    },
                    {
                      "name": "Mortal241",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 241
                    },
                    {
                      "name": "Mortal242",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 242
                    },
                    {
                      "name": "Mortal243",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 243
                    },
                    {
                      "name": "Mortal244",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 244
                    },
                    {
                      "name": "Mortal245",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 245
                    },
                    {
                      "name": "Mortal246",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 246
                    },
                    {
                      "name": "Mortal247",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 247
                    },
                    {
                      "name": "Mortal248",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 248
                    },
                    {
                      "name": "Mortal249",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 249
                    },
                    {
                      "name": "Mortal250",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 250
                    },
                    {
                      "name": "Mortal251",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 251
                    },
                    {
                      "name": "Mortal252",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 252
                    },
                    {
                      "name": "Mortal253",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 253
                    },
                    {
                      "name": "Mortal254",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 254
                    },
                    {
                      "name": "Mortal255",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 255
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 276,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_nonce",
                "CheckNonce"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 88,
                      "typeName": "T::Index"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 277,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_weight",
                "CheckWeight"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 278,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "ChargeTransactionPayment"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 118,
                      "typeName": "BalanceOf<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 279,
            "type": {
              "path": [
                "interbtc_runtime_standalone",
                "Runtime"
              ],
              "def": {
                "composite": {}
              }
            }
          }
        ]
      },
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "entries": [
              {
                "name": "Account",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 3
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The full account information for a particular account ID."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Total extrinsics count for the current block."
                ]
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "ty": {
                  "Plain": 7
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current weight for the block."
                ]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 9
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Map of block numbers to block hashes."
                ]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 10
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "ty": {
                  "Plain": 9
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Hash of the previous block."
                ]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "ty": {
                  "Plain": 11
                },
                "default": [
                  0
                ],
                "docs": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "ty": {
                  "Plain": 18
                },
                "default": [
                  0
                ],
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: This storage item is explicitly unbounded since it is never intended to be read",
                  " from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of events in the `Events<T>` list."
                ]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 9,
                    "value": 86
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "ty": {
                  "Plain": 87
                },
                "default": [
                  0
                ],
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 57
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 57
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "ty": {
                  "Plain": 84
                },
                "default": [
                  0
                ],
                "docs": [
                  " The execution phase of the block."
                ]
              }
            ]
          },
          "calls": {
            "ty": 90
          },
          "event": {
            "ty": 21
          },
          "constants": [
            {
              "name": "BlockWeights",
              "ty": 95,
              "value": [
                0,
                242,
                5,
                42,
                1,
                0,
                0,
                0,
                0,
                32,
                74,
                169,
                209,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                200,
                9,
                174,
                46,
                1,
                0,
                0,
                1,
                0,
                152,
                247,
                62,
                93,
                1,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                80,
                92,
                24,
                163,
                1,
                0,
                0,
                1,
                0,
                32,
                74,
                169,
                209,
                1,
                0,
                0,
                1,
                0,
                136,
                82,
                106,
                116,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Block & extrinsics weights: base values and limits."
              ]
            },
            {
              "name": "BlockLength",
              "ty": 99,
              "value": [
                0,
                0,
                60,
                0,
                0,
                0,
                80,
                0,
                0,
                0,
                80,
                0
              ],
              "docs": [
                " The maximum length of a block (in bytes)."
              ]
            },
            {
              "name": "BlockHashCount",
              "ty": 4,
              "value": [
                250,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
              ]
            },
            {
              "name": "DbWeight",
              "ty": 101,
              "value": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ]
            },
            {
              "name": "Version",
              "ty": 102,
              "value": [
                76,
                105,
                110,
                116,
                101,
                114,
                98,
                116,
                99,
                45,
                115,
                116,
                97,
                110,
                100,
                97,
                108,
                111,
                110,
                101,
                76,
                105,
                110,
                116,
                101,
                114,
                98,
                116,
                99,
                45,
                115,
                116,
                97,
                110,
                100,
                97,
                108,
                111,
                110,
                101,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                72,
                223,
                106,
                203,
                104,
                153,
                7,
                96,
                155,
                3,
                0,
                0,
                0,
                55,
                227,
                151,
                252,
                124,
                145,
                245,
                228,
                1,
                0,
                0,
                0,
                64,
                254,
                58,
                212,
                1,
                248,
                149,
                154,
                5,
                0,
                0,
                0,
                210,
                188,
                152,
                151,
                238,
                208,
                143,
                21,
                3,
                0,
                0,
                0,
                247,
                139,
                39,
                139,
                229,
                63,
                69,
                76,
                2,
                0,
                0,
                0,
                171,
                60,
                5,
                114,
                41,
                31,
                235,
                139,
                1,
                0,
                0,
                0,
                237,
                153,
                197,
                172,
                178,
                94,
                237,
                245,
                3,
                0,
                0,
                0,
                221,
                113,
                141,
                92,
                197,
                50,
                98,
                212,
                1,
                0,
                0,
                0,
                188,
                157,
                137,
                144,
                79,
                91,
                146,
                63,
                1,
                0,
                0,
                0,
                55,
                200,
                187,
                19,
                80,
                169,
                162,
                168,
                1,
                0,
                0,
                0,
                198,
                177,
                6,
                250,
                26,
                56,
                131,
                128,
                1,
                0,
                0,
                0,
                110,
                249,
                83,
                0,
                75,
                163,
                14,
                89,
                1,
                0,
                0,
                0,
                195,
                106,
                181,
                148,
                52,
                171,
                144,
                233,
                1,
                0,
                0,
                0,
                22,
                218,
                150,
                211,
                108,
                109,
                91,
                183,
                1,
                0,
                0,
                0,
                202,
                243,
                155,
                151,
                154,
                104,
                128,
                189,
                1,
                0,
                0,
                0,
                105,
                226,
                225,
                170,
                66,
                31,
                79,
                176,
                1,
                0,
                0,
                0,
                145,
                210,
                171,
                161,
                223,
                202,
                46,
                6,
                1,
                0,
                0,
                0,
                43,
                229,
                203,
                2,
                176,
                165,
                110,
                115,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0
              ],
              "docs": [
                " Get the chain's current version."
              ]
            },
            {
              "name": "SS58Prefix",
              "ty": 107,
              "value": [
                42,
                0
              ],
              "docs": [
                " The designated SS85 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "error": {
            "ty": 108
          },
          "index": 0
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "entries": [
              {
                "name": "Now",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current time for the current block."
                ]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "ty": {
                  "Plain": 57
                },
                "default": [
                  0
                ],
                "docs": [
                  " Did the timestamp get updated in this block?"
                ]
              }
            ]
          },
          "calls": {
            "ty": 109
          },
          "event": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "ty": 8,
              "value": [
                184,
                11,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum period between blocks. Beware that this is different to the *expected*",
                " period that the block production apparatus provides. Your chosen consensus system will",
                " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
                " double this period on default settings."
              ]
            }
          ],
          "error": null,
          "index": 1
        },
        {
          "name": "Sudo",
          "storage": {
            "prefix": "Sudo",
            "entries": [
              {
                "name": "Key",
                "modifier": "Default",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The `AccountId` of the sudo key."
                ]
              }
            ]
          },
          "calls": {
            "ty": 111
          },
          "event": {
            "ty": 28
          },
          "constants": [],
          "error": {
            "ty": 160
          },
          "index": 2
        },
        {
          "name": "Utility",
          "storage": null,
          "calls": {
            "ty": 113
          },
          "event": {
            "ty": 31
          },
          "constants": [
            {
              "name": "batched_calls_limit",
              "ty": 4,
              "value": [
                104,
                47,
                1,
                0
              ],
              "docs": [
                " The limit on the number of batched calls."
              ]
            }
          ],
          "error": {
            "ty": 161
          },
          "index": 3
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "entries": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "ty": {
                  "Plain": 62
                },
                "default": [
                  0,
                  0,
                  100,
                  167,
                  179,
                  182,
                  224,
                  13,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 162
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [
            {
              "name": "TransactionByteFee",
              "ty": 6,
              "value": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The fee to be paid for making a transaction; the per-byte portion."
              ]
            },
            {
              "name": "OperationalFeeMultiplier",
              "ty": 2,
              "value": [
                5
              ],
              "docs": [
                " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            },
            {
              "name": "WeightToFee",
              "ty": 163,
              "value": [
                4,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
              ],
              "docs": [
                " The polynomial that is applied in order to derive fee from weight."
              ]
            }
          ],
          "error": null,
          "index": 4
        },
        {
          "name": "Scheduler",
          "storage": {
            "prefix": "Scheduler",
            "entries": [
              {
                "name": "Agenda",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 165
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Items to be executed, indexed by the block number that they should be executed on."
                ]
              },
              {
                "name": "Lookup",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 10,
                    "value": 33
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Lookup from identity to the block number and index of the task."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 172
                },
                "default": [
                  0
                ],
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " New networks start with last version."
                ]
              }
            ]
          },
          "calls": {
            "ty": 115
          },
          "event": {
            "ty": 32
          },
          "constants": [
            {
              "name": "MaximumWeight",
              "ty": 8,
              "value": [
                0,
                208,
                237,
                144,
                46,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum weight that may be scheduled per block for any dispatchables of less",
                " priority than `schedule::HARD_DEADLINE`."
              ]
            },
            {
              "name": "MaxScheduledPerBlock",
              "ty": 4,
              "value": [
                30,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of scheduled calls in the queue for a single block.",
                " Not strictly enforced, but used for weight estimation."
              ]
            }
          ],
          "error": {
            "ty": 173
          },
          "index": 5
        },
        {
          "name": "Currency",
          "storage": null,
          "calls": null,
          "event": null,
          "constants": [
            {
              "name": "GetWrappedCurrencyId",
              "ty": 36,
              "value": [
                1
              ],
              "docs": [
                " Wrapped currency: INTERBTC."
              ]
            }
          ],
          "error": {
            "ty": 174
          },
          "index": 6
        },
        {
          "name": "Tokens",
          "storage": {
            "prefix": "Tokens",
            "entries": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 36,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total issuance of a token type."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 175,
                    "value": 176
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Any liquidity locks of a token type under an account.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Accounts",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 175,
                    "value": 179
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The balance of a token type under an account.",
                  "",
                  " NOTE: If the total is ever zero, decrease account ref account.",
                  "",
                  " NOTE: This is only used in the case that this module is used to store",
                  " balances."
                ]
              }
            ]
          },
          "calls": {
            "ty": 117
          },
          "event": {
            "ty": 35
          },
          "constants": [
            {
              "name": "MaxLocks",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 180
          },
          "index": 7
        },
        {
          "name": "Rewards",
          "storage": {
            "prefix": "Rewards",
            "entries": [
              {
                "name": "TotalStake",
                "modifier": "Default",
                "ty": {
                  "Plain": 40
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total stake deposited to this reward pool."
                ]
              },
              {
                "name": "TotalRewards",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 36,
                    "value": 40
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total unclaimed rewards distributed to this reward pool.",
                  " NOTE: this is currently only used for integration tests."
                ]
              },
              {
                "name": "RewardPerToken",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 36,
                    "value": 40
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Used to compute the rewards for a participant's stake."
                ]
              },
              {
                "name": "Stake",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 38,
                    "value": 40
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The stake of a participant in this reward pool."
                ]
              },
              {
                "name": "RewardTally",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 181,
                    "value": 40
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Accounts for previous changes in stake size."
                ]
              }
            ]
          },
          "calls": {
            "ty": 119
          },
          "event": {
            "ty": 37
          },
          "constants": [
            {
              "name": "GetNativeCurrencyId",
              "ty": 36,
              "value": [
                2
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 182
          },
          "index": 8
        },
        {
          "name": "Staking",
          "storage": {
            "prefix": "Staking",
            "entries": [
              {
                "name": "TotalStake",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 183,
                    "value": 40
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total stake - this will increase on deposit and decrease on withdrawal."
                ]
              },
              {
                "name": "TotalCurrentStake",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 183,
                    "value": 40
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total stake - this will increase on deposit and decrease on withdrawal or slashing."
                ]
              },
              {
                "name": "TotalRewards",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 184,
                    "value": 40
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total unclaimed rewards distributed to this reward pool.",
                  " NOTE: this is currently only used for integration tests."
                ]
              },
              {
                "name": "RewardPerToken",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 184,
                    "value": 40
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Used to compute the rewards for a participant's stake."
                ]
              },
              {
                "name": "SlashPerToken",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 183,
                    "value": 40
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Used to compute the amount to slash from a participant's stake."
                ]
              },
              {
                "name": "Stake",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 185,
                    "value": 40
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The stake of a participant in this reward pool."
                ]
              },
              {
                "name": "RewardTally",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 187,
                    "value": 40
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Accounts for previous changes in stake size."
                ]
              },
              {
                "name": "SlashTally",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 185,
                    "value": 40
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Accounts for previous changes in stake size."
                ]
              },
              {
                "name": "Nonce",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 38,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The nonce of the current staking pool, used in force refunds.",
                  " This is a strictly increasing value."
                ]
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 42
          },
          "constants": [
            {
              "name": "GetNativeCurrencyId",
              "ty": 36,
              "value": [
                2
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 189
          },
          "index": 9
        },
        {
          "name": "BTCRelay",
          "storage": {
            "prefix": "BTCRelay",
            "entries": [
              {
                "name": "BlockHeaders",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 44,
                    "value": 190
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Store Bitcoin block headers"
                ]
              },
              {
                "name": "Chains",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Priority queue of BlockChain elements, ordered by the maximum height (descending).",
                  " The first index into this mapping (0) is considered to be the longest chain. The value",
                  " of the entry is the index into `ChainsIndex` to retrieve the `BlockChain`."
                ]
              },
              {
                "name": "ChainsIndex",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 195
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Auxiliary mapping of chains ids to `BlockChain` entries. The first index into this",
                  " mapping (0) is considered to be the Bitcoin main chain."
                ]
              },
              {
                "name": "ChainsHashes",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 33,
                    "value": 44
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Stores a mapping from (chain_index, block_height) to block hash"
                ]
              },
              {
                "name": "BestBlock",
                "modifier": "Default",
                "ty": {
                  "Plain": 44
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Store the current blockchain tip"
                ]
              },
              {
                "name": "BestBlockHeight",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Store the height of the best block"
                ]
              },
              {
                "name": "StartBlockHeight",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " BTC height when the relay was initialized"
                ]
              },
              {
                "name": "ChainCounter",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Increment-only counter used to track new BlockChain entries"
                ]
              },
              {
                "name": "StableBitcoinConfirmations",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Global security parameter k for stable Bitcoin transactions"
                ]
              },
              {
                "name": "StableParachainConfirmations",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Global security parameter k for stable Parachain transactions"
                ]
              },
              {
                "name": "DisableDifficultyCheck",
                "modifier": "Default",
                "ty": {
                  "Plain": 57
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether the module should perform difficulty checks."
                ]
              },
              {
                "name": "DisableInclusionCheck",
                "modifier": "Default",
                "ty": {
                  "Plain": 57
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether the module should perform inclusion checks."
                ]
              }
            ]
          },
          "calls": {
            "ty": 120
          },
          "event": {
            "ty": 43
          },
          "constants": [
            {
              "name": "ParachainBlocksPerBitcoinBlock",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 196
          },
          "index": 10
        },
        {
          "name": "Security",
          "storage": {
            "prefix": "Security",
            "entries": [
              {
                "name": "ParachainStatus",
                "modifier": "Default",
                "ty": {
                  "Plain": 46
                },
                "default": [
                  0
                ],
                "docs": [
                  " Integer/Enum defining the current state of the BTC-Parachain."
                ]
              },
              {
                "name": "Errors",
                "modifier": "Default",
                "ty": {
                  "Plain": 197
                },
                "default": [
                  0
                ],
                "docs": [
                  " Set of ErrorCodes, indicating the reason for an \"Error\" ParachainStatus."
                ]
              },
              {
                "name": "Nonce",
                "modifier": "Default",
                "ty": {
                  "Plain": 192
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Integer increment-only counter, used to prevent collisions when generating identifiers",
                  " for e.g. issue, redeem or replace requests (for OP_RETURN field in Bitcoin)."
                ]
              },
              {
                "name": "ActiveBlockCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Like frame_system::block_number, but this one only increments if the parachain status is RUNNING.",
                  " This variable is used to keep track of durations, such as the issue/redeem/replace expiry. If the",
                  " parachain is not RUNNING, no payment proofs can be submitted, and it wouldn't be fair to punish",
                  " the user/vault. By using this variable we ensure that they have sufficient time to submit their",
                  " proof."
                ]
              }
            ]
          },
          "calls": {
            "ty": 124
          },
          "event": {
            "ty": 45
          },
          "constants": [],
          "error": {
            "ty": 198
          },
          "index": 11
        },
        {
          "name": "Relay",
          "storage": {
            "prefix": "Relay",
            "entries": [
              {
                "name": "TheftReports",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 199,
                    "value": 200
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping of Bitcoin transaction identifiers (SHA256 hashes) to account",
                  " identifiers of Vaults accused of theft."
                ]
              }
            ]
          },
          "calls": {
            "ty": 125
          },
          "event": {
            "ty": 49
          },
          "constants": [],
          "error": {
            "ty": 201
          },
          "index": 12
        },
        {
          "name": "VaultRegistry",
          "storage": {
            "prefix": "VaultRegistry",
            "entries": [
              {
                "name": "MinimumCollateralVault",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 36,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The minimum collateral (e.g. DOT/KSM) a Vault needs to provide to register."
                ]
              },
              {
                "name": "PunishmentDelay",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " If a Vault fails to execute a correct redeem or replace, it is temporarily banned",
                  " from further issue, redeem or replace requests. This value configures the duration",
                  " of this ban (in number of blocks) ."
                ]
              },
              {
                "name": "SystemCollateralCeiling",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Determines the over-collateralization rate for collateral locked by Vaults, necessary for",
                  " wrapped tokens. This threshold should be greater than the LiquidationCollateralThreshold."
                ]
              },
              {
                "name": "SecureCollateralThreshold",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 39,
                    "value": 62
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Determines the over-collateralization rate for collateral locked by Vaults, necessary for",
                  " wrapped tokens. This threshold should be greater than the LiquidationCollateralThreshold."
                ]
              },
              {
                "name": "PremiumRedeemThreshold",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 39,
                    "value": 62
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Determines the rate for the collateral rate of Vaults, at which users receive a premium,",
                  " allocated from the Vault's collateral, when performing a redeem with this Vault. This",
                  " threshold should be greater than the LiquidationCollateralThreshold."
                ]
              },
              {
                "name": "LiquidationCollateralThreshold",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 39,
                    "value": 62
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Determines the lower bound for the collateral rate in issued tokens. If a Vault’s",
                  " collateral rate drops below this, automatic liquidation (forced Redeem) is triggered."
                ]
              },
              {
                "name": "LiquidationVaultAccountId",
                "modifier": "Default",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Account identifier of an artificial Vault maintained by the VaultRegistry to handle issued balances",
                  " and collateral of liquidated Vaults. That is, when a Vault is liquidated, its balances are",
                  " transferred to LiquidationVault and claims are later handled via the LiquidationVault."
                ]
              },
              {
                "name": "LiquidationVault",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 39,
                    "value": 202
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "Vaults",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 38,
                    "value": 203
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping of Vaults, using the respective Vault account identifier as key."
                ]
              },
              {
                "name": "ReservedAddresses",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 53,
                    "value": 38
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping of reserved BTC addresses to the registered account"
                ]
              },
              {
                "name": "TotalUserVaultCollateral",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Total collateral used for collateral tokens issued by active vaults, excluding the liquidation vault"
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 207
                },
                "default": [
                  0
                ],
                "docs": [
                  " Build storage at V1 (requires default 0)."
                ]
              }
            ]
          },
          "calls": {
            "ty": 128
          },
          "event": {
            "ty": 50
          },
          "constants": [
            {
              "name": "PalletId",
              "ty": 208,
              "value": [
                109,
                111,
                100,
                47,
                118,
                114,
                101,
                103
              ],
              "docs": [
                " The vault module id, used for deriving its sovereign account ID."
              ]
            },
            {
              "name": "GetGriefingCollateralCurrencyId",
              "ty": 36,
              "value": [
                0
              ],
              "docs": [
                " Currency used for griefing collateral, e.g. DOT."
              ]
            }
          ],
          "error": {
            "ty": 209
          },
          "index": 13
        },
        {
          "name": "Oracle",
          "storage": {
            "prefix": "Oracle",
            "entries": [
              {
                "name": "Aggregate",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 61,
                    "value": 62
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Current medianized value for the given key"
                ]
              },
              {
                "name": "RawValues",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 210,
                    "value": 211
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "RawValuesUpdated",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 61,
                    "value": 57
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " if a key is present, it means the values have been updated"
                ]
              },
              {
                "name": "ValidUntil",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 61,
                    "value": 8
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Time until which the aggregate is valid"
                ]
              },
              {
                "name": "MaxDelay",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Maximum delay (milliseconds) for a reported value to be used"
                ]
              },
              {
                "name": "AuthorizedOracles",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 10
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 212
                },
                "default": [
                  0
                ],
                "docs": [
                  " Build storage at V1 (requires default 0)."
                ]
              }
            ]
          },
          "calls": {
            "ty": 129
          },
          "event": {
            "ty": 58
          },
          "constants": [],
          "error": {
            "ty": 213
          },
          "index": 14
        },
        {
          "name": "Issue",
          "storage": {
            "prefix": "Issue",
            "entries": [
              {
                "name": "IssueRequests",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 9,
                    "value": 214
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Users create issue requests to issue tokens. This mapping provides access",
                  " from a unique hash `IssueId` to an `IssueRequest` struct."
                ]
              },
              {
                "name": "IssuePeriod",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The time difference in number of blocks between an issue request is created",
                  " and required completion time by a user. The issue period has an upper limit",
                  " to prevent griefing of vault collateral."
                ]
              },
              {
                "name": "IssueBtcDustValue",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The minimum amount of btc that is required for issue requests; lower values would",
                  " risk the rejection of payment on Bitcoin."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 216
                },
                "default": [
                  0
                ],
                "docs": [
                  " Build storage at V1 (requires default 0)."
                ]
              }
            ]
          },
          "calls": {
            "ty": 130
          },
          "event": {
            "ty": 63
          },
          "constants": [],
          "error": {
            "ty": 217
          },
          "index": 15
        },
        {
          "name": "Redeem",
          "storage": {
            "prefix": "Redeem",
            "entries": [
              {
                "name": "RedeemPeriod",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The time difference in number of blocks between a redeem request is created and required completion time by a",
                  " vault. The redeem period has an upper limit to ensure the user gets their BTC in time and to potentially",
                  " punish a vault for inactivity or stealing BTC."
                ]
              },
              {
                "name": "RedeemRequests",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 9,
                    "value": 218
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Users create redeem requests to receive BTC in return for their previously issued tokens.",
                  " This mapping provides access from a unique hash redeemId to a Redeem struct."
                ]
              },
              {
                "name": "RedeemBtcDustValue",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The minimum amount of btc that is accepted for redeem requests; any lower values would",
                  " risk the bitcoin client to reject the payment"
                ]
              },
              {
                "name": "RedeemTransactionSize",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " the expected size in bytes of the redeem bitcoin transfer"
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 219
                },
                "default": [
                  0
                ],
                "docs": [
                  " Build storage at V1 (requires default 0)."
                ]
              }
            ]
          },
          "calls": {
            "ty": 131
          },
          "event": {
            "ty": 64
          },
          "constants": [],
          "error": {
            "ty": 220
          },
          "index": 16
        },
        {
          "name": "Replace",
          "storage": {
            "prefix": "Replace",
            "entries": [
              {
                "name": "ReplaceRequests",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 9,
                    "value": 221
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Vaults create replace requests to transfer locked collateral.",
                  " This mapping provides access from a unique hash to a `ReplaceRequest`."
                ]
              },
              {
                "name": "ReplacePeriod",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The time difference in number of blocks between when a replace request is created",
                  " and required completion time by a vault. The replace period has an upper limit",
                  " to prevent griefing of vault collateral."
                ]
              },
              {
                "name": "ReplaceBtcDustValue",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The minimum amount of btc that is accepted for replace requests; any lower values would",
                  " risk the bitcoin client to reject the payment"
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 223
                },
                "default": [
                  0
                ],
                "docs": [
                  " Build storage at V1 (requires default 0)."
                ]
              }
            ]
          },
          "calls": {
            "ty": 132
          },
          "event": {
            "ty": 66
          },
          "constants": [],
          "error": {
            "ty": 224
          },
          "index": 17
        },
        {
          "name": "Fee",
          "storage": {
            "prefix": "Fee",
            "entries": [
              {
                "name": "IssueFee",
                "modifier": "Default",
                "ty": {
                  "Plain": 62
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " # Issue",
                  " Fee share that users need to pay to issue tokens."
                ]
              },
              {
                "name": "IssueGriefingCollateral",
                "modifier": "Default",
                "ty": {
                  "Plain": 62
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Default griefing collateral (e.g. DOT/KSM) as a percentage of the locked",
                  " collateral of a Vault a user has to lock to issue tokens."
                ]
              },
              {
                "name": "RedeemFee",
                "modifier": "Default",
                "ty": {
                  "Plain": 62
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " # Redeem",
                  " Fee share that users need to pay to redeem tokens."
                ]
              },
              {
                "name": "RefundFee",
                "modifier": "Default",
                "ty": {
                  "Plain": 62
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " # Refund",
                  " Fee share that users need to pay to refund overpaid tokens."
                ]
              },
              {
                "name": "PremiumRedeemFee",
                "modifier": "Default",
                "ty": {
                  "Plain": 62
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " # Vault Registry",
                  " If users execute a redeem with a Vault flagged for premium redeem,",
                  " they can earn a collateral premium, slashed from the Vault."
                ]
              },
              {
                "name": "PunishmentFee",
                "modifier": "Default",
                "ty": {
                  "Plain": 62
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Fee that a Vault has to pay if it fails to execute redeem or replace requests",
                  " (for redeem, on top of the slashed value of the request). The fee is",
                  " paid in collateral based on the token amount at the current exchange rate."
                ]
              },
              {
                "name": "ReplaceGriefingCollateral",
                "modifier": "Default",
                "ty": {
                  "Plain": 62
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " # Replace",
                  " Default griefing collateral (e.g. DOT/KSM) as a percentage of the to-be-locked collateral",
                  " of the new Vault. This collateral will be slashed and allocated to the replacing Vault",
                  " if the to-be-replaced Vault does not transfer BTC on time."
                ]
              },
              {
                "name": "TheftFee",
                "modifier": "Default",
                "ty": {
                  "Plain": 62
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " # Relayer",
                  " Fee that is taken from a liquidated Vault on theft, used to pay the reporter."
                ]
              },
              {
                "name": "TheftFeeMax",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Upper bound to the reward that can be payed to a reporter on success."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 225
                },
                "default": [
                  0
                ],
                "docs": [
                  " Build storage at V1 (requires default 0)."
                ]
              }
            ]
          },
          "calls": {
            "ty": 133
          },
          "event": null,
          "constants": [
            {
              "name": "FeePalletId",
              "ty": 208,
              "value": [
                109,
                111,
                100,
                47,
                102,
                101,
                101,
                115
              ],
              "docs": [
                " The fee module id, used for deriving its sovereign account ID."
              ]
            },
            {
              "name": "GetNativeCurrencyId",
              "ty": 36,
              "value": [
                2
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 226
          },
          "index": 18
        },
        {
          "name": "Refund",
          "storage": {
            "prefix": "Refund",
            "entries": [
              {
                "name": "RefundBtcDustValue",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The minimum amount of btc that is accepted for refund requests (NOTE: too low",
                  " values could result in the bitcoin client rejecting the payment)"
                ]
              },
              {
                "name": "RefundTransactionSize",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " the expected size in bytes of the redeem bitcoin transfer"
                ]
              },
              {
                "name": "RefundRequests",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 9,
                    "value": 227
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " This mapping provides access from a unique hash refundId to a Refund struct."
                ]
              }
            ]
          },
          "calls": {
            "ty": 134
          },
          "event": {
            "ty": 67
          },
          "constants": [],
          "error": {
            "ty": 228
          },
          "index": 19
        },
        {
          "name": "Nomination",
          "storage": {
            "prefix": "Nomination",
            "entries": [
              {
                "name": "NominationEnabled",
                "modifier": "Default",
                "ty": {
                  "Plain": 57
                },
                "default": [
                  0
                ],
                "docs": [
                  " Flag indicating whether this feature is enabled"
                ]
              },
              {
                "name": "Vaults",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 38,
                    "value": 57
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Map of Vaults who have enabled nomination"
                ]
              }
            ]
          },
          "calls": {
            "ty": 135
          },
          "event": {
            "ty": 68
          },
          "constants": [],
          "error": {
            "ty": 229
          },
          "index": 20
        },
        {
          "name": "Democracy",
          "storage": {
            "prefix": "Democracy",
            "entries": [
              {
                "name": "PublicPropCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of (public) proposals that have been made so far."
                ]
              },
              {
                "name": "PublicProps",
                "modifier": "Default",
                "ty": {
                  "Plain": 230
                },
                "default": [
                  0
                ],
                "docs": [
                  " The public proposals. Unsorted. The second item is the proposal's hash."
                ]
              },
              {
                "name": "DepositOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 232
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Those who have locked a deposit.",
                  "",
                  " TWOX-NOTE: Safe, as increasing integer keys are safe."
                ]
              },
              {
                "name": "Preimages",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 233
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Map of hashes to the proposal preimage, along with who registered it and their deposit.",
                  " The block number is the block at which it was deposited."
                ]
              },
              {
                "name": "ReferendumCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The next free referendum index, aka the number of referenda started so far."
                ]
              },
              {
                "name": "LowestUnbaked",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The lowest referendum index representing an unbaked referendum. Equal to",
                  " `ReferendumCount` if there isn't a unbaked referendum."
                ]
              },
              {
                "name": "ReferendumInfoOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 234
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Information concerning any given referendum.",
                  "",
                  " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."
                ]
              },
              {
                "name": "VotingOf",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 237
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " All votes for a particular voter. We store the balance for the number of votes that we",
                  " have recorded. The second item is the total amount of delegations, that will be added.",
                  "",
                  " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Accounts for which there are locks in action which may be removed at some point in the",
                  " future. The value is the block number at which the lock expires and may be removed.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "LastTabledWasExternal",
                "modifier": "Default",
                "ty": {
                  "Plain": 57
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if the last referendum tabled was submitted externally. False if it was a public",
                  " proposal."
                ]
              },
              {
                "name": "NextExternal",
                "modifier": "Optional",
                "ty": {
                  "Plain": 242
                },
                "default": [
                  0
                ],
                "docs": [
                  " The referendum to be tabled whenever it would be valid to table an external proposal.",
                  " This happens when a referendum needs to be tabled and one of two conditions are met:",
                  " - `LastTabledWasExternal` is `false`; or",
                  " - `PublicProps` is empty."
                ]
              },
              {
                "name": "Blacklist",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 243
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                  " (until when it may not be resubmitted) and who vetoed it."
                ]
              },
              {
                "name": "Cancellations",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 57
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Record of all proposals that have been subject to emergency cancellation."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Optional",
                "ty": {
                  "Plain": 244
                },
                "default": [
                  0
                ],
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " New networks start with last version."
                ]
              }
            ]
          },
          "calls": {
            "ty": 136
          },
          "event": {
            "ty": 69
          },
          "constants": [
            {
              "name": "EnactmentPeriod",
              "ty": 4,
              "value": [
                30,
                0,
                0,
                0
              ],
              "docs": [
                " The period between a proposal being approved and enacted.",
                "",
                " It should generally be a little more than the unstake period to ensure that",
                " voting stakers have an opportunity to remove themselves from the system in the case",
                " where they are on the losing side of a vote."
              ]
            },
            {
              "name": "LaunchPeriod",
              "ty": 4,
              "value": [
                20,
                0,
                0,
                0
              ],
              "docs": [
                " How often (in blocks) new public referenda are launched."
              ]
            },
            {
              "name": "VotingPeriod",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " How often (in blocks) to check for new votes."
              ]
            },
            {
              "name": "VoteLockingPeriod",
              "ty": 4,
              "value": [
                30,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum period of vote locking.",
                "",
                " It should be no shorter than enactment period to ensure that in the case of an approval,",
                " those successful voters are locked into the consequences that their votes entail."
              ]
            },
            {
              "name": "MinimumDeposit",
              "ty": 6,
              "value": [
                0,
                16,
                165,
                212,
                232,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount to be used as a deposit for a public referendum proposal."
              ]
            },
            {
              "name": "InstantAllowed",
              "ty": 57,
              "value": [
                1
              ],
              "docs": [
                " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
                " want to set this permanently to `false`, others may want to condition it on things such",
                " as an upgrade having happened recently."
              ]
            },
            {
              "name": "FastTrackVotingPeriod",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum voting period allowed for a fast-track referendum."
              ]
            },
            {
              "name": "CooloffPeriod",
              "ty": 4,
              "value": [
                64,
                56,
                0,
                0
              ],
              "docs": [
                " Period in blocks where an external proposal may not be re-submitted after being vetoed."
              ]
            },
            {
              "name": "PreimageByteDeposit",
              "ty": 6,
              "value": [
                0,
                225,
                245,
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of balance that must be deposited per byte of preimage stored."
              ]
            },
            {
              "name": "MaxVotes",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of votes for an account.",
                "",
                " Also used to compute weight, an overly big value can",
                " lead to extrinsic with very big weight: see `delegate` for instance."
              ]
            },
            {
              "name": "MaxProposals",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of public proposals that can exist at any time."
              ]
            }
          ],
          "error": {
            "ty": 245
          },
          "index": 21
        },
        {
          "name": "Council",
          "storage": {
            "prefix": "Council",
            "entries": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "ty": {
                  "Plain": 246
                },
                "default": [
                  0
                ],
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 112
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 247
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "ty": {
                  "Plain": 70
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": {
            "ty": 140
          },
          "event": {
            "ty": 72
          },
          "constants": [],
          "error": {
            "ty": 248
          },
          "index": 22
        },
        {
          "name": "TechnicalCommittee",
          "storage": {
            "prefix": "TechnicalCommittee",
            "entries": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "ty": {
                  "Plain": 249
                },
                "default": [
                  0
                ],
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 112
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 247
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "ty": {
                  "Plain": 70
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": {
            "ty": 142
          },
          "event": {
            "ty": 73
          },
          "constants": [],
          "error": {
            "ty": 250
          },
          "index": 23
        },
        {
          "name": "TechnicalMembership",
          "storage": {
            "prefix": "TechnicalMembership",
            "entries": [
              {
                "name": "Members",
                "modifier": "Default",
                "ty": {
                  "Plain": 70
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current membership, stored as an ordered Vec."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current prime member, if one exists."
                ]
              }
            ]
          },
          "calls": {
            "ty": 143
          },
          "event": {
            "ty": 74
          },
          "constants": [],
          "error": {
            "ty": 251
          },
          "index": 24
        },
        {
          "name": "Treasury",
          "storage": {
            "prefix": "Treasury",
            "entries": [
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Number of proposals that have been made."
                ]
              },
              {
                "name": "Proposals",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 252
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Proposals that have been made."
                ]
              },
              {
                "name": "Approvals",
                "modifier": "Default",
                "ty": {
                  "Plain": 253
                },
                "default": [
                  0
                ],
                "docs": [
                  " Proposal indices that have been approved but not yet awarded."
                ]
              }
            ]
          },
          "calls": {
            "ty": 144
          },
          "event": {
            "ty": 75
          },
          "constants": [
            {
              "name": "ProposalBond",
              "ty": 255,
              "value": [
                80,
                195,
                0,
                0
              ],
              "docs": [
                " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                " An accepted proposal gets these back. A rejected proposal does not."
              ]
            },
            {
              "name": "ProposalBondMinimum",
              "ty": 6,
              "value": [
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "SpendPeriod",
              "ty": 4,
              "value": [
                192,
                137,
                1,
                0
              ],
              "docs": [
                " Period between successive spends."
              ]
            },
            {
              "name": "Burn",
              "ty": 255,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Percentage of spare funds (if any) that are burnt per spend period."
              ]
            },
            {
              "name": "PalletId",
              "ty": 208,
              "value": [
                109,
                111,
                100,
                47,
                116,
                114,
                115,
                121
              ],
              "docs": [
                " The treasury's pallet id, used for deriving its sovereign account ID."
              ]
            },
            {
              "name": "MaxApprovals",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of approvals that can wait in the spending queue."
              ]
            }
          ],
          "error": {
            "ty": 256
          },
          "index": 25
        },
        {
          "name": "ElectionsPhragmen",
          "storage": {
            "prefix": "ElectionsPhragmen",
            "entries": [
              {
                "name": "Members",
                "modifier": "Default",
                "ty": {
                  "Plain": 257
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current elected members.",
                  "",
                  " Invariant: Always sorted based on account id."
                ]
              },
              {
                "name": "RunnersUp",
                "modifier": "Default",
                "ty": {
                  "Plain": 257
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current reserved runners-up.",
                  "",
                  " Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the",
                  " last (i.e. _best_) runner-up will be replaced."
                ]
              },
              {
                "name": "Candidates",
                "modifier": "Default",
                "ty": {
                  "Plain": 77
                },
                "default": [
                  0
                ],
                "docs": [
                  " The present candidate list. A current member or runner-up can never enter this vector",
                  " and is always implicitly assumed to be a candidate.",
                  "",
                  " Second element is the deposit.",
                  "",
                  " Invariant: Always sorted based on account id."
                ]
              },
              {
                "name": "ElectionRounds",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total number of vote rounds that have happened, excluding the upcoming one."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 259
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Votes and locked stake of a particular voter.",
                  "",
                  " TWOX-NOTE: SAFE as `AccountId` is a crypto hash."
                ]
              }
            ]
          },
          "calls": {
            "ty": 145
          },
          "event": {
            "ty": 76
          },
          "constants": [
            {
              "name": "PalletId",
              "ty": 106,
              "value": [
                112,
                104,
                114,
                101,
                108,
                101,
                99,
                116
              ],
              "docs": [
                " Identifier for the elections-phragmen pallet's lock"
              ]
            },
            {
              "name": "CandidacyBond",
              "ty": 6,
              "value": [
                0,
                16,
                165,
                212,
                232,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " How much should be locked up in order to submit one's candidacy."
              ]
            },
            {
              "name": "VotingBondBase",
              "ty": 6,
              "value": [
                0,
                112,
                19,
                183,
                46,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Base deposit associated with voting.",
                "",
                " This should be sensibly high to economically ensure the pallet cannot be attacked by",
                " creating a gigantic number of votes."
              ]
            },
            {
              "name": "VotingBondFactor",
              "ty": 6,
              "value": [
                0,
                208,
                18,
                19,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of bond that need to be locked for each vote (32 bytes)."
              ]
            },
            {
              "name": "DesiredMembers",
              "ty": 4,
              "value": [
                13,
                0,
                0,
                0
              ],
              "docs": [
                " Number of members to elect."
              ]
            },
            {
              "name": "DesiredRunnersUp",
              "ty": 4,
              "value": [
                7,
                0,
                0,
                0
              ],
              "docs": [
                " Number of runners_up to keep."
              ]
            },
            {
              "name": "TermDuration",
              "ty": 4,
              "value": [
                192,
                137,
                1,
                0
              ],
              "docs": [
                " How long each seat is kept. This defines the next block number at which an election",
                " round will happen. If set to zero, no elections are ever triggered and the module will",
                " be in passive mode."
              ]
            }
          ],
          "error": {
            "ty": 260
          },
          "index": 26
        },
        {
          "name": "Aura",
          "storage": null,
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 27
        },
        {
          "name": "Grandpa",
          "storage": {
            "prefix": "Grandpa",
            "entries": [
              {
                "name": "State",
                "modifier": "Default",
                "ty": {
                  "Plain": 261
                },
                "default": [
                  0
                ],
                "docs": [
                  " State of the current authority set."
                ]
              },
              {
                "name": "PendingChange",
                "modifier": "Optional",
                "ty": {
                  "Plain": 262
                },
                "default": [
                  0
                ],
                "docs": [
                  " Pending change: (signaled at, scheduled change)."
                ]
              },
              {
                "name": "NextForced",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " next block number where we can force a change."
                ]
              },
              {
                "name": "Stalled",
                "modifier": "Optional",
                "ty": {
                  "Plain": 33
                },
                "default": [
                  0
                ],
                "docs": [
                  " `true` if we are currently stalled."
                ]
              },
              {
                "name": "CurrentSetId",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of changes (both in terms of keys and underlying economic responsibilities)",
                  " in the \"set\" of Grandpa validators from genesis."
                ]
              },
              {
                "name": "SetIdSession",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 8,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                  " members were responsible.",
                  "",
                  " TWOX-NOTE: `SetId` is not under user control."
                ]
              }
            ]
          },
          "calls": {
            "ty": 147
          },
          "event": {
            "ty": 79
          },
          "constants": [
            {
              "name": "MaxAuthorities",
              "ty": 4,
              "value": [
                32,
                0,
                0,
                0
              ],
              "docs": [
                " Max Authorities in use"
              ]
            }
          ],
          "error": {
            "ty": 264
          },
          "index": 28
        }
      ],
      "extrinsic": {
        "ty": 265,
        "version": 4,
        "signed_extensions": [
          {
            "identifier": "CheckSpecVersion",
            "ty": 271,
            "additional_signed": 4
          },
          {
            "identifier": "CheckTxVersion",
            "ty": 272,
            "additional_signed": 4
          },
          {
            "identifier": "CheckGenesis",
            "ty": 273,
            "additional_signed": 9
          },
          {
            "identifier": "CheckMortality",
            "ty": 274,
            "additional_signed": 9
          },
          {
            "identifier": "CheckNonce",
            "ty": 276,
            "additional_signed": 30
          },
          {
            "identifier": "CheckWeight",
            "ty": 277,
            "additional_signed": 30
          },
          {
            "identifier": "ChargeTransactionPayment",
            "ty": 278,
            "additional_signed": 30
          }
        ]
      },
      "ty": 279
    }
  }
]
